"use strict";var T=Object.defineProperty;var m=Object.getOwnPropertySymbols;var W=Object.prototype.hasOwnProperty,H=Object.prototype.propertyIsEnumerable;var D=(e,t,n)=>t in e?T(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))W.call(t,n)&&D(e,n,t[n]);if(m)for(var n of m(t))H.call(t,n)&&D(e,n,t[n]);return e};var g=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)};var d=(e,t,n)=>(g(e,t,"read from private field"),n?n.call(e):t.get(e)),h=(e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)},u=(e,t,n,i)=>(g(e,t,"write to private field"),i?i.call(e,n):t.set(e,n),n);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const k=require("../.Chunks/e2c2858e.js"),f=require("@wordpress/data"),L=require("@wordpress/compose"),q=require("react/jsx-runtime");require("react");const S=require("@wordpress/hooks"),y=e=>({namespacedWithDispatch:i=>f.withDispatch((a,o,{select:r})=>{const s=a(e),M=r(e);return i(s,M)}),namespacedWithSelect:i=>f.withSelect((a,o,r)=>{const s=a(e);return i(s,o,r)})}),z=(e,t,n)=>{const{namespacedWithDispatch:i,namespacedWithSelect:a}=y(e);let o=s=>s;t&&(o=a(t));let r=s=>s;return n&&(r=i(n)),L.compose(o,r)};var c;class F{constructor(){h(this,c,!1)}isInitialized(){return d(this,c)}_initLogic(){throw new Error("initLogic function is not implemented at extended class")}init(){this.isInitialized()||(this._initLogic.call(this,...arguments),u(this,c,!0))}}c=new WeakMap;var l;class b extends F{constructor(){super(...arguments);h(this,l,null)}_initLogic(n){const i=self||global;u(this,l,i[n]||{}),i[n]=void 0}getDataProperty(n,i=null){return d(this,l)[n]||i}}l=new WeakMap;const x=new b,I={filters:{ADD_SUB_COMPONENT:"subComponentAdd"}};function E(){const e="ub",t={FILTER:"filter",ACTION:"action"};this.hookTypes=I;const n=(i,a)=>`${e}.${a}.${i}`;this.applyFilters=(i,a)=>S.applyFilters(n(i,t.FILTER),a),this.addFilter=(i,a,o)=>{S.addFilter(n(i,t.FILTER),a,o)}}const w=new E,N=e=>t=>q.jsx(e,p(p({},t),w));exports.Debouncer=k.Debouncer;exports.IconSizeDefinition=k.IconSizeDefinition;exports.FrontendDataManager=x;exports.HookManager=w;exports.ManagerBase=F;exports.connectWithStore=z;exports.createNamespacedHelpers=y;exports.hookTypes=I;exports.withHookManager=N;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
