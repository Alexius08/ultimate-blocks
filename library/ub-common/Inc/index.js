"use strict";var u=(e,n,t)=>{if(!n.has(e))throw TypeError("Cannot "+t)};var d=(e,n,t)=>(u(e,n,"read from private field"),t?t.call(e):n.get(e)),h=(e,n,t)=>{if(n.has(e))throw TypeError("Cannot add the same private member more than once");n instanceof WeakSet?n.add(e):n.set(e,t)},p=(e,n,t,i)=>(u(e,n,"write to private field"),i?i.call(e,t):n.set(e,t),t);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const D=require("../.Chunks/e2c2858e.js"),m=require("@wordpress/data"),W=require("@wordpress/compose"),S=e=>({namespacedWithDispatch:i=>m.withDispatch((s,r,{select:c})=>{const a=s(e),g=c(e);return i(a,g)}),namespacedWithSelect:i=>m.withSelect((s,r,c)=>{const a=s(e);return i(a,r,c)})}),w=(e,n,t)=>{const{namespacedWithDispatch:i,namespacedWithSelect:s}=S(e);let r=a=>a;n&&(r=s(n));let c=a=>a;return t&&(c=i(t)),W.compose(r,c)};var o;class f{constructor(){h(this,o,!1)}isInitialized(){return d(this,o)}_initLogic(){throw new Error("initLogic function is not implemented at extended class")}init(){this.isInitialized()||(this._initLogic.call(this,...arguments),p(this,o,!0))}}o=new WeakMap;var l;class z extends f{constructor(){super(...arguments);h(this,l,null)}_initLogic(t){const i=self||global;p(this,l,i[t]||{}),i[t]=void 0}getDataProperty(t,i=null){return d(this,l)[t]||i}}l=new WeakMap;const I=new z;exports.Debouncer=D.Debouncer;exports.IconSizeDefinition=D.IconSizeDefinition;exports.FrontendDataManager=I;exports.ManagerBase=f;exports.connectWithStore=w;exports.createNamespacedHelpers=S;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmMvanMvU3RvcmVIZWxwZXJzLmpzIiwiLi4vLi4vc3JjL2luYy9qcy9iYXNlL01hbmFnZXJCYXNlLmpzIiwiLi4vLi4vc3JjL2luYy9qcy9Gcm9udGVuZERhdGFNYW5hZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdpdGhEaXNwYXRjaCwgd2l0aFNlbGVjdCB9IGZyb20gJ0B3b3JkcHJlc3MvZGF0YSc7XG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAnQHdvcmRwcmVzcy9jb21wb3NlJztcblxuLyoqXG4gKiBDcmVhdGUgbmFtZXNwYWNlZCBzdG9yZSBoZWxwZXJzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yZU5hbWVzcGFjZSBzdG9yZSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH0gbmFtZXNwYWNlZCBoZWxwZXJzXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVOYW1lc3BhY2VkSGVscGVycyA9IChzdG9yZU5hbWVzcGFjZSkgPT4ge1xuXHRjb25zdCBuYW1lc3BhY2VkV2l0aERpc3BhdGNoID0gKGNhbGxiYWNrKSA9PiB7XG5cdFx0cmV0dXJuIHdpdGhEaXNwYXRjaCgoZGlzcGF0Y2gsIG93blByb3BzLCB7IHNlbGVjdCB9KSA9PiB7XG5cdFx0XHRjb25zdCBuYW1lc3BhY2VkRGlzcGF0Y2ggPSBkaXNwYXRjaChzdG9yZU5hbWVzcGFjZSk7XG5cdFx0XHRjb25zdCBuYW1lc3BhY2VkU2VsZWN0ID0gc2VsZWN0KHN0b3JlTmFtZXNwYWNlKTtcblx0XHRcdHJldHVybiBjYWxsYmFjayhuYW1lc3BhY2VkRGlzcGF0Y2gsIG5hbWVzcGFjZWRTZWxlY3QpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdGNvbnN0IG5hbWVzcGFjZWRXaXRoU2VsZWN0ID0gKGNhbGxiYWNrKSA9PiB7XG5cdFx0cmV0dXJuIHdpdGhTZWxlY3QoKHNlbGVjdCwgb3duUHJvcHMsIHJlZ2lzdHJ5KSA9PiB7XG5cdFx0XHRjb25zdCBuYW1lc3BhY2VkU2VsZWN0ID0gc2VsZWN0KHN0b3JlTmFtZXNwYWNlKTtcblx0XHRcdHJldHVybiBjYWxsYmFjayhuYW1lc3BhY2VkU2VsZWN0LCBvd25Qcm9wcywgcmVnaXN0cnkpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdHJldHVybiB7IG5hbWVzcGFjZWRXaXRoRGlzcGF0Y2gsIG5hbWVzcGFjZWRXaXRoU2VsZWN0IH07XG59O1xuXG4vKipcbiAqIEhPQyBmb3IgY29ubmVjdGluZyBjb21wb25lbnRzIHdpdGggR3V0ZW5iZXJnIGRhdGEgc3RvcmVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSAgIHN0b3JlTmFtZXNwYWNlIHN0b3JlIG5hbWVzcGFjZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0TWFwcGluZyAgc2VsZWN0IG1hcHBpbmdcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFjdGlvbk1hcHBpbmcgIGFjdGlvbiBtYXBwaW5nXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gY29tcG9zZWQgSE9DIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjb25uZWN0V2l0aFN0b3JlID0gKFxuXHRzdG9yZU5hbWVzcGFjZSxcblx0c2VsZWN0TWFwcGluZyxcblx0YWN0aW9uTWFwcGluZ1xuKSA9PiB7XG5cdC8vIGdlbmVyYXRlIG5hbWVzcGFjZWQgaGVscGVycyBmb3IgcmVsYXRlZCBzdG9yZVxuXHRjb25zdCB7IG5hbWVzcGFjZWRXaXRoRGlzcGF0Y2gsIG5hbWVzcGFjZWRXaXRoU2VsZWN0IH0gPVxuXHRcdGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzKHN0b3JlTmFtZXNwYWNlKTtcblxuXHRsZXQgYXBwbHlTZWxlY3QgPSAocHJvcHMpID0+IHByb3BzO1xuXHRpZiAoc2VsZWN0TWFwcGluZykge1xuXHRcdGFwcGx5U2VsZWN0ID0gbmFtZXNwYWNlZFdpdGhTZWxlY3Qoc2VsZWN0TWFwcGluZyk7XG5cdH1cblxuXHRsZXQgYXBwbHlBY3Rpb24gPSAocHJvcHMpID0+IHByb3BzO1xuXHRpZiAoYWN0aW9uTWFwcGluZykge1xuXHRcdGFwcGx5QWN0aW9uID0gbmFtZXNwYWNlZFdpdGhEaXNwYXRjaChhY3Rpb25NYXBwaW5nKTtcblx0fVxuXG5cdHJldHVybiBjb21wb3NlKGFwcGx5U2VsZWN0LCBhcHBseUFjdGlvbik7XG59O1xuIiwiLyoqXG4gKiBNYW5hZ2VyIGJhc2UgYWJzdHJhY3QgY2xhc3MuXG4gKlxuICogSW1wbGVtZW50IGBpbml0TG9naWNgIGZ1bmN0aW9uIHRvIGNvbXBseS5cbiAqL1xuY2xhc3MgTWFuYWdlckJhc2Uge1xuXHQvKipcblx0ICogSW5pdGlhbGl6YXRpb24gc3RhdHVzIG9mIG1hbmFnZXIuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKi9cblx0I2luaXRpYWxpemVkID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIEdldCBpbml0aWFsaXphdGlvbiBzdGF0dXMgb2YgbWFuYWdlci5cblx0ICpcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gaW5pdGlhbGl6YXRpb24gc3RhdHVzXG5cdCAqL1xuXHRpc0luaXRpYWxpemVkKCkge1xuXHRcdHJldHVybiB0aGlzLiNpbml0aWFsaXplZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXphdGlvbiBsb2dpYy5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqL1xuXHRfaW5pdExvZ2ljKCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdCdpbml0TG9naWMgZnVuY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGF0IGV4dGVuZGVkIGNsYXNzJ1xuXHRcdCk7XG5cdH1cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZSBtYW5hZ2VyIGluc3RhbmNlLlxuXHQgKi9cblx0aW5pdCgpIHtcblx0XHRpZiAoIXRoaXMuaXNJbml0aWFsaXplZCgpKSB7XG5cdFx0XHR0aGlzLl9pbml0TG9naWMuY2FsbCh0aGlzLCAuLi5hcmd1bWVudHMpO1xuXHRcdFx0dGhpcy4jaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEBtb2R1bGUgTWFuYWdlckJhc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgTWFuYWdlckJhc2U7XG4iLCJpbXBvcnQgTWFuYWdlckJhc2UgZnJvbSAnQEluYy9qcy9iYXNlL01hbmFnZXJCYXNlJztcblxuLyoqXG4gKiBGcm9udGVuZCBkYXRhIG1hbmFnZXIuXG4gKi9cbmNsYXNzIEZyb250ZW5kRGF0YU1hbmFnZXIgZXh0ZW5kcyBNYW5hZ2VyQmFzZSB7XG5cdC8qKlxuXHQgKiBTZXJ2ZXIgc2VudCBkYXRhIGZvciBmcm9udGVuZCBvcGVyYXRpb25zLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAdHlwZSB7bnVsbH1cblx0ICovXG5cdCNmcm9udGVuZERhdGEgPSBudWxsO1xuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgbWFuYWdlclxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZ2xvYmFsT2JqZWN0S2V5IG5hbWUgb2YgdGhlIGtleSB3aGVyZSBzZXJ2ZXIgc2VudCBkYXRhIGlzIHN0b3JlZCBhdCBnbG9iYWwgY29udGV4dFxuXHQgKi9cblx0X2luaXRMb2dpYyhnbG9iYWxPYmplY3RLZXkpIHtcblx0XHRjb25zdCBjb250ZXh0ID0gc2VsZiB8fCBnbG9iYWw7XG5cdFx0dGhpcy4jZnJvbnRlbmREYXRhID0gY29udGV4dFtnbG9iYWxPYmplY3RLZXldIHx8IHt9O1xuXHRcdGNvbnRleHRbZ2xvYmFsT2JqZWN0S2V5XSA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgZGF0YSB2YWx1ZSBvZiBoaWdoIGxldmVsIGtleS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IGtleSAgICAgICAga2V5XG5cdCAqIEBwYXJhbSB7YW55fSAgICBkZWZhdWx0VmFsIGRlZmF1bHQgdmFsdWVcblx0ICogQHJldHVybiB7YW55fSB2YWx1ZVxuXHQgKi9cblx0Z2V0RGF0YVByb3BlcnR5KGtleSwgZGVmYXVsdFZhbCA9IG51bGwpIHtcblx0XHRyZXR1cm4gdGhpcy4jZnJvbnRlbmREYXRhW2tleV0gfHwgZGVmYXVsdFZhbDtcblx0fVxufVxuXG4vKipcbiAqIEBtb2R1bGUgRnJvbnRlbmREYXRhTWFuYWdlclxuICovXG5leHBvcnQgZGVmYXVsdCBuZXcgRnJvbnRlbmREYXRhTWFuYWdlcigpO1xuIl0sIm5hbWVzIjpbImNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzIiwic3RvcmVOYW1lc3BhY2UiLCJjYWxsYmFjayIsIndpdGhEaXNwYXRjaCIsImRpc3BhdGNoIiwib3duUHJvcHMiLCJzZWxlY3QiLCJuYW1lc3BhY2VkRGlzcGF0Y2giLCJuYW1lc3BhY2VkU2VsZWN0Iiwid2l0aFNlbGVjdCIsInJlZ2lzdHJ5IiwiY29ubmVjdFdpdGhTdG9yZSIsInNlbGVjdE1hcHBpbmciLCJhY3Rpb25NYXBwaW5nIiwibmFtZXNwYWNlZFdpdGhEaXNwYXRjaCIsIm5hbWVzcGFjZWRXaXRoU2VsZWN0IiwiYXBwbHlTZWxlY3QiLCJwcm9wcyIsImFwcGx5QWN0aW9uIiwiY29tcG9zZSIsIk1hbmFnZXJCYXNlIiwiX19wcml2YXRlQWRkIiwiX2luaXRpYWxpemVkIiwiX19wcml2YXRlR2V0IiwiX19wcml2YXRlU2V0IiwiRnJvbnRlbmREYXRhTWFuYWdlciIsIl9mcm9udGVuZERhdGEiLCJnbG9iYWxPYmplY3RLZXkiLCJjb250ZXh0Iiwia2V5IiwiZGVmYXVsdFZhbCIsIkZyb250ZW5kRGF0YU1hbmFnZXIkMSJdLCJtYXBwaW5ncyI6IjBnQkFTYUEsRUFBMkJDLElBZ0JoQyxDQUFFLHVCQWZ1QkMsR0FDeEJDLEVBQVksYUFBQyxDQUFDQyxFQUFVQyxFQUFVLENBQUUsT0FBQUMsQ0FBTSxJQUFPLENBQ3ZELE1BQU1DLEVBQXFCSCxFQUFTSCxDQUFjLEVBQzVDTyxFQUFtQkYsRUFBT0wsQ0FBYyxFQUM5QyxPQUFPQyxFQUFTSyxFQUFvQkMsQ0FBZ0IsQ0FDdkQsQ0FBRyxFQVUrQixxQkFQSE4sR0FDdEJPLGFBQVcsQ0FBQ0gsRUFBUUQsRUFBVUssSUFBYSxDQUNqRCxNQUFNRixFQUFtQkYsRUFBT0wsQ0FBYyxFQUM5QyxPQUFPQyxFQUFTTSxFQUFrQkgsRUFBVUssQ0FBUSxDQUN2RCxDQUFHLElBY1VDLEVBQW1CLENBQy9CVixFQUNBVyxFQUNBQyxJQUNJLENBRUosS0FBTSxDQUFFLHVCQUFBQyxFQUF3QixxQkFBQUMsQ0FBc0IsRUFDckRmLEVBQXdCQyxDQUFjLEVBRXZDLElBQUllLEVBQWVDLEdBQVVBLEVBQ3pCTCxJQUNISSxFQUFjRCxFQUFxQkgsQ0FBYSxHQUdqRCxJQUFJTSxFQUFlRCxHQUFVQSxFQUM3QixPQUFJSixJQUNISyxFQUFjSixFQUF1QkQsQ0FBYSxHQUc1Q00sRUFBTyxRQUFDSCxFQUFhRSxDQUFXLENBQ3hDLFFDbkRBLE1BQU1FLENBQVksQ0FBbEIsY0FPQ0MsRUFBQSxLQUFBQyxFQUFlLElBT2YsZUFBZ0IsQ0FDZixPQUFPQyxFQUFBLEtBQUtELEVBQ1osQ0FPRCxZQUFhLENBQ1osTUFBTSxJQUFJLE1BQ1QseURBQ0gsQ0FDRSxDQUtELE1BQU8sQ0FDRCxLQUFLLGtCQUNULEtBQUssV0FBVyxLQUFLLEtBQU0sR0FBRyxTQUFTLEVBQ3ZDRSxFQUFBLEtBQUtGLEVBQWUsSUFFckIsQ0FDRixDQS9CQ0EsRUFBQSxrQkNQRCxNQUFNRyxVQUE0QkwsQ0FBWSxDQUE5QyxrQ0FPQ0MsRUFBQSxLQUFBSyxFQUFnQixNQU9oQixXQUFXQyxFQUFpQixDQUMzQixNQUFNQyxFQUFVLE1BQVEsT0FDeEJKLEVBQUEsS0FBS0UsRUFBZ0JFLEVBQVFELENBQWUsR0FBSyxDQUFBLEdBQ2pEQyxFQUFRRCxDQUFlLEVBQUksTUFDM0IsQ0FTRCxnQkFBZ0JFLEVBQUtDLEVBQWEsS0FBTSxDQUN2QyxPQUFPUCxFQUFBLEtBQUtHLEdBQWNHLENBQUcsR0FBS0MsQ0FDbEMsQ0FDRixDQXZCQ0osRUFBQSxZQTRCRCxNQUFlSyxFQUFBLElBQUlOIn0=
