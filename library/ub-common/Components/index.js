"use strict";var Sr=Object.defineProperty;var nn=Object.getOwnPropertySymbols;var Er=Object.prototype.hasOwnProperty,Or=Object.prototype.propertyIsEnumerable;var rn=(e,t,n)=>t in e?Sr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,ut=(e,t)=>{for(var n in t||(t={}))Er.call(t,n)&&rn(e,n,t[n]);if(nn)for(var n of nn(t))Or.call(t,n)&&rn(e,n,t[n]);return e};var he=(e,t,n)=>new Promise((r,a)=>{var i=f=>{try{s(n.next(f))}catch(c){a(c)}},o=f=>{try{s(n.throw(f))}catch(c){a(c)}},s=f=>f.done?r(f.value):Promise.resolve(f.value).then(i,o);s((n=n.apply(e,t)).next())});Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const D=require("react/jsx-runtime"),M=require("react"),$t=require("@wordpress/components"),qn=require("@wordpress/i18n"),Ar=require("../.Chunks/edb91f7f.js"),Pr=require("@fortawesome/free-solid-svg-icons"),Ir=require("@fortawesome/free-brands-svg-icons");let We;const Tr=new Uint8Array(16);function Cr(){if(!We&&(We=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!We))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return We(Tr)}const X=[];for(let e=0;e<256;++e)X.push((e+256).toString(16).slice(1));function _r(e,t=0){return(X[e[t+0]]+X[e[t+1]]+X[e[t+2]]+X[e[t+3]]+"-"+X[e[t+4]]+X[e[t+5]]+"-"+X[e[t+6]]+X[e[t+7]]+"-"+X[e[t+8]]+X[e[t+9]]+"-"+X[e[t+10]]+X[e[t+11]]+X[e[t+12]]+X[e[t+13]]+X[e[t+14]]+X[e[t+15]]).toLowerCase()}const Rr=typeof crypto!="undefined"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),an={randomUUID:Rr};function St(e,t,n){if(an.randomUUID&&!t&&!e)return an.randomUUID();e=e||{};const r=e.random||(e.rng||Cr)();if(r[6]=r[6]&15|64,r[8]=r[8]&63|128,t){n=n||0;for(let a=0;a<16;++a)t[n+a]=r[a];return t}return _r(r)}function Nr({onChange:e,value:t}){return D.jsx("div",{className:"ultimate-blocks-icon-search-wrapper",children:D.jsx("input",{className:"ultimate-blocks-icon-search-input",type:"text",value:t,placeholder:qn.__("Searchâ€¦","ub-common"),onInput:({target:n})=>e(n.value)})})}function zt(e,t){const{iconName:n}=t;this.getAttributes=()=>t,this.getName=()=>n}function on(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?on(Object(n),!0).forEach(function(r){H(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):on(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function nt(e){return nt=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},nt(e)}function jr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function sn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Mr(e,t,n){return t&&sn(e.prototype,t),n&&sn(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function H(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Yt(e,t){return Fr(e)||$r(e,t)||Wn(e,t)||Yr()}function $e(e){return Lr(e)||Dr(e)||Wn(e)||zr()}function Lr(e){if(Array.isArray(e))return Et(e)}function Fr(e){if(Array.isArray(e))return e}function Dr(e){if(typeof Symbol!="undefined"&&e[Symbol.iterator]!=null||e["@@iterator"]!=null)return Array.from(e)}function $r(e,t){var n=e==null?null:typeof Symbol!="undefined"&&e[Symbol.iterator]||e["@@iterator"];if(n!=null){var r=[],a=!0,i=!1,o,s;try{for(n=n.call(e);!(a=(o=n.next()).done)&&(r.push(o.value),!(t&&r.length===t));a=!0);}catch(f){i=!0,s=f}finally{try{!a&&n.return!=null&&n.return()}finally{if(i)throw s}}return r}}function Wn(e,t){if(e){if(typeof e=="string")return Et(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);if(n==="Object"&&e.constructor&&(n=e.constructor.name),n==="Map"||n==="Set")return Array.from(e);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Et(e,t)}}function Et(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function zr(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Yr(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var fn=function(){},Ut={},Hn={},Bn=null,Vn={mark:fn,measure:fn};try{typeof window!="undefined"&&(Ut=window),typeof document!="undefined"&&(Hn=document),typeof MutationObserver!="undefined"&&(Bn=MutationObserver),typeof performance!="undefined"&&(Vn=performance)}catch(e){}var Ur=Ut.navigator||{},cn=Ur.userAgent,ln=cn===void 0?"":cn,pe=Ut,U=Hn,un=Bn,He=Vn;pe.document;var ue=!!U.documentElement&&!!U.head&&typeof U.addEventListener=="function"&&typeof U.createElement=="function",Xn=~ln.indexOf("MSIE")||~ln.indexOf("Trident/"),Be,Ve,Xe,Ge,Ke,fe="___FONT_AWESOME___",Ot=16,Gn="fa",Kn="svg-inline--fa",ke="data-fa-i2svg",At="data-fa-pseudo-element",qr="data-fa-pseudo-element-pending",qt="data-prefix",Wt="data-icon",mn="fontawesome-i2svg",Wr="async",Hr=["HTML","HEAD","STYLE","SCRIPT"],Jn=function(){try{return process.env.NODE_ENV==="production"}catch(e){return!1}}(),Y="classic",W="sharp",Ht=[Y,W];function ze(e){return new Proxy(e,{get:function(n,r){return r in n?n[r]:n[Y]}})}var je=ze((Be={},H(Be,Y,{fa:"solid",fas:"solid","fa-solid":"solid",far:"regular","fa-regular":"regular",fal:"light","fa-light":"light",fat:"thin","fa-thin":"thin",fad:"duotone","fa-duotone":"duotone",fab:"brands","fa-brands":"brands",fak:"kit","fa-kit":"kit"}),H(Be,W,{fa:"solid",fass:"solid","fa-solid":"solid"}),Be)),Me=ze((Ve={},H(Ve,Y,{solid:"fas",regular:"far",light:"fal",thin:"fat",duotone:"fad",brands:"fab",kit:"fak"}),H(Ve,W,{solid:"fass"}),Ve)),Le=ze((Xe={},H(Xe,Y,{fab:"fa-brands",fad:"fa-duotone",fak:"fa-kit",fal:"fa-light",far:"fa-regular",fas:"fa-solid",fat:"fa-thin"}),H(Xe,W,{fass:"fa-solid"}),Xe)),Br=ze((Ge={},H(Ge,Y,{"fa-brands":"fab","fa-duotone":"fad","fa-kit":"fak","fa-light":"fal","fa-regular":"far","fa-solid":"fas","fa-thin":"fat"}),H(Ge,W,{"fa-solid":"fass"}),Ge)),Vr=/fa(s|r|l|t|d|b|k|ss)?[\-\ ]/,Qn="fa-layers-text",Xr=/Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp|Kit)?.*/i,Gr=ze((Ke={},H(Ke,Y,{900:"fas",400:"far",normal:"far",300:"fal",100:"fat"}),H(Ke,W,{900:"fass"}),Ke)),Zn=[1,2,3,4,5,6,7,8,9,10],Kr=Zn.concat([11,12,13,14,15,16,17,18,19,20]),Jr=["class","data-prefix","data-icon","data-fa-transform","data-fa-mask"],xe={GROUP:"duotone-group",SWAP_OPACITY:"swap-opacity",PRIMARY:"primary",SECONDARY:"secondary"},Fe=new Set;Object.keys(Me[Y]).map(Fe.add.bind(Fe));Object.keys(Me[W]).map(Fe.add.bind(Fe));var Qr=[].concat(Ht,$e(Fe),["2xs","xs","sm","lg","xl","2xl","beat","border","fade","beat-fade","bounce","flip-both","flip-horizontal","flip-vertical","flip","fw","inverse","layers-counter","layers-text","layers","li","pull-left","pull-right","pulse","rotate-180","rotate-270","rotate-90","rotate-by","shake","spin-pulse","spin-reverse","spin","stack-1x","stack-2x","stack","ul",xe.GROUP,xe.SWAP_OPACITY,xe.PRIMARY,xe.SECONDARY]).concat(Zn.map(function(e){return"".concat(e,"x")})).concat(Kr.map(function(e){return"w-".concat(e)})),Re=pe.FontAwesomeConfig||{};function Zr(e){var t=U.querySelector("script["+e+"]");if(t)return t.getAttribute(e)}function ea(e){return e===""?!0:e==="false"?!1:e==="true"?!0:e}if(U&&typeof U.querySelector=="function"){var ta=[["data-family-prefix","familyPrefix"],["data-css-prefix","cssPrefix"],["data-family-default","familyDefault"],["data-style-default","styleDefault"],["data-replacement-class","replacementClass"],["data-auto-replace-svg","autoReplaceSvg"],["data-auto-add-css","autoAddCss"],["data-auto-a11y","autoA11y"],["data-search-pseudo-elements","searchPseudoElements"],["data-observe-mutations","observeMutations"],["data-mutate-approach","mutateApproach"],["data-keep-original-source","keepOriginalSource"],["data-measure-performance","measurePerformance"],["data-show-missing-icons","showMissingIcons"]];ta.forEach(function(e){var t=Yt(e,2),n=t[0],r=t[1],a=ea(Zr(n));a!=null&&(Re[r]=a)})}var er={styleDefault:"solid",familyDefault:"classic",cssPrefix:Gn,replacementClass:Kn,autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,mutateApproach:"async",keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0};Re.familyPrefix&&(Re.cssPrefix=Re.familyPrefix);var Te=p(p({},er),Re);Te.autoReplaceSvg||(Te.observeMutations=!1);var h={};Object.keys(er).forEach(function(e){Object.defineProperty(h,e,{enumerable:!0,set:function(n){Te[e]=n,Ne.forEach(function(r){return r(h)})},get:function(){return Te[e]}})});Object.defineProperty(h,"familyPrefix",{enumerable:!0,set:function(t){Te.cssPrefix=t,Ne.forEach(function(n){return n(h)})},get:function(){return Te.cssPrefix}});pe.FontAwesomeConfig=h;var Ne=[];function na(e){return Ne.push(e),function(){Ne.splice(Ne.indexOf(e),1)}}var de=Ot,oe={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1};function ra(e){if(!(!e||!ue)){var t=U.createElement("style");t.setAttribute("type","text/css"),t.innerHTML=e;for(var n=U.head.childNodes,r=null,a=n.length-1;a>-1;a--){var i=n[a],o=(i.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(o)>-1&&(r=i)}return U.head.insertBefore(t,r),e}}var aa="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";function De(){for(var e=12,t="";e-- >0;)t+=aa[Math.random()*62|0];return t}function Ce(e){for(var t=[],n=(e||[]).length>>>0;n--;)t[n]=e[n];return t}function Bt(e){return e.classList?Ce(e.classList):(e.getAttribute("class")||"").split(" ").filter(function(t){return t})}function tr(e){return"".concat(e).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function ia(e){return Object.keys(e||{}).reduce(function(t,n){return t+"".concat(n,'="').concat(tr(e[n]),'" ')},"").trim()}function st(e){return Object.keys(e||{}).reduce(function(t,n){return t+"".concat(n,": ").concat(e[n].trim(),";")},"")}function Vt(e){return e.size!==oe.size||e.x!==oe.x||e.y!==oe.y||e.rotate!==oe.rotate||e.flipX||e.flipY}function oa(e){var t=e.transform,n=e.containerWidth,r=e.iconWidth,a={transform:"translate(".concat(n/2," 256)")},i="translate(".concat(t.x*32,", ").concat(t.y*32,") "),o="scale(".concat(t.size/16*(t.flipX?-1:1),", ").concat(t.size/16*(t.flipY?-1:1),") "),s="rotate(".concat(t.rotate," 0 0)"),f={transform:"".concat(i," ").concat(o," ").concat(s)},c={transform:"translate(".concat(r/2*-1," -256)")};return{outer:a,inner:f,path:c}}function sa(e){var t=e.transform,n=e.width,r=n===void 0?Ot:n,a=e.height,i=a===void 0?Ot:a,o=e.startCentered,s=o===void 0?!1:o,f="";return s&&Xn?f+="translate(".concat(t.x/de-r/2,"em, ").concat(t.y/de-i/2,"em) "):s?f+="translate(calc(-50% + ".concat(t.x/de,"em), calc(-50% + ").concat(t.y/de,"em)) "):f+="translate(".concat(t.x/de,"em, ").concat(t.y/de,"em) "),f+="scale(".concat(t.size/de*(t.flipX?-1:1),", ").concat(t.size/de*(t.flipY?-1:1),") "),f+="rotate(".concat(t.rotate,"deg) "),f}var fa=`:root, :host {
  --fa-font-solid: normal 900 1em/1 "Font Awesome 6 Solid";
  --fa-font-regular: normal 400 1em/1 "Font Awesome 6 Regular";
  --fa-font-light: normal 300 1em/1 "Font Awesome 6 Light";
  --fa-font-thin: normal 100 1em/1 "Font Awesome 6 Thin";
  --fa-font-duotone: normal 900 1em/1 "Font Awesome 6 Duotone";
  --fa-font-sharp-solid: normal 900 1em/1 "Font Awesome 6 Sharp";
  --fa-font-brands: normal 400 1em/1 "Font Awesome 6 Brands";
}

svg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {
  overflow: visible;
  box-sizing: content-box;
}

.svg-inline--fa {
  display: var(--fa-display, inline-block);
  height: 1em;
  overflow: visible;
  vertical-align: -0.125em;
}
.svg-inline--fa.fa-2xs {
  vertical-align: 0.1em;
}
.svg-inline--fa.fa-xs {
  vertical-align: 0em;
}
.svg-inline--fa.fa-sm {
  vertical-align: -0.0714285705em;
}
.svg-inline--fa.fa-lg {
  vertical-align: -0.2em;
}
.svg-inline--fa.fa-xl {
  vertical-align: -0.25em;
}
.svg-inline--fa.fa-2xl {
  vertical-align: -0.3125em;
}
.svg-inline--fa.fa-pull-left {
  margin-right: var(--fa-pull-margin, 0.3em);
  width: auto;
}
.svg-inline--fa.fa-pull-right {
  margin-left: var(--fa-pull-margin, 0.3em);
  width: auto;
}
.svg-inline--fa.fa-li {
  width: var(--fa-li-width, 2em);
  top: 0.25em;
}
.svg-inline--fa.fa-fw {
  width: var(--fa-fw-width, 1.25em);
}

.fa-layers svg.svg-inline--fa {
  bottom: 0;
  left: 0;
  margin: auto;
  position: absolute;
  right: 0;
  top: 0;
}

.fa-layers-counter, .fa-layers-text {
  display: inline-block;
  position: absolute;
  text-align: center;
}

.fa-layers {
  display: inline-block;
  height: 1em;
  position: relative;
  text-align: center;
  vertical-align: -0.125em;
  width: 1em;
}
.fa-layers svg.svg-inline--fa {
  -webkit-transform-origin: center center;
          transform-origin: center center;
}

.fa-layers-text {
  left: 50%;
  top: 50%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  -webkit-transform-origin: center center;
          transform-origin: center center;
}

.fa-layers-counter {
  background-color: var(--fa-counter-background-color, #ff253a);
  border-radius: var(--fa-counter-border-radius, 1em);
  box-sizing: border-box;
  color: var(--fa-inverse, #fff);
  line-height: var(--fa-counter-line-height, 1);
  max-width: var(--fa-counter-max-width, 5em);
  min-width: var(--fa-counter-min-width, 1.5em);
  overflow: hidden;
  padding: var(--fa-counter-padding, 0.25em 0.5em);
  right: var(--fa-right, 0);
  text-overflow: ellipsis;
  top: var(--fa-top, 0);
  -webkit-transform: scale(var(--fa-counter-scale, 0.25));
          transform: scale(var(--fa-counter-scale, 0.25));
  -webkit-transform-origin: top right;
          transform-origin: top right;
}

.fa-layers-bottom-right {
  bottom: var(--fa-bottom, 0);
  right: var(--fa-right, 0);
  top: auto;
  -webkit-transform: scale(var(--fa-layers-scale, 0.25));
          transform: scale(var(--fa-layers-scale, 0.25));
  -webkit-transform-origin: bottom right;
          transform-origin: bottom right;
}

.fa-layers-bottom-left {
  bottom: var(--fa-bottom, 0);
  left: var(--fa-left, 0);
  right: auto;
  top: auto;
  -webkit-transform: scale(var(--fa-layers-scale, 0.25));
          transform: scale(var(--fa-layers-scale, 0.25));
  -webkit-transform-origin: bottom left;
          transform-origin: bottom left;
}

.fa-layers-top-right {
  top: var(--fa-top, 0);
  right: var(--fa-right, 0);
  -webkit-transform: scale(var(--fa-layers-scale, 0.25));
          transform: scale(var(--fa-layers-scale, 0.25));
  -webkit-transform-origin: top right;
          transform-origin: top right;
}

.fa-layers-top-left {
  left: var(--fa-left, 0);
  right: auto;
  top: var(--fa-top, 0);
  -webkit-transform: scale(var(--fa-layers-scale, 0.25));
          transform: scale(var(--fa-layers-scale, 0.25));
  -webkit-transform-origin: top left;
          transform-origin: top left;
}

.fa-1x {
  font-size: 1em;
}

.fa-2x {
  font-size: 2em;
}

.fa-3x {
  font-size: 3em;
}

.fa-4x {
  font-size: 4em;
}

.fa-5x {
  font-size: 5em;
}

.fa-6x {
  font-size: 6em;
}

.fa-7x {
  font-size: 7em;
}

.fa-8x {
  font-size: 8em;
}

.fa-9x {
  font-size: 9em;
}

.fa-10x {
  font-size: 10em;
}

.fa-2xs {
  font-size: 0.625em;
  line-height: 0.1em;
  vertical-align: 0.225em;
}

.fa-xs {
  font-size: 0.75em;
  line-height: 0.0833333337em;
  vertical-align: 0.125em;
}

.fa-sm {
  font-size: 0.875em;
  line-height: 0.0714285718em;
  vertical-align: 0.0535714295em;
}

.fa-lg {
  font-size: 1.25em;
  line-height: 0.05em;
  vertical-align: -0.075em;
}

.fa-xl {
  font-size: 1.5em;
  line-height: 0.0416666682em;
  vertical-align: -0.125em;
}

.fa-2xl {
  font-size: 2em;
  line-height: 0.03125em;
  vertical-align: -0.1875em;
}

.fa-fw {
  text-align: center;
  width: 1.25em;
}

.fa-ul {
  list-style-type: none;
  margin-left: var(--fa-li-margin, 2.5em);
  padding-left: 0;
}
.fa-ul > li {
  position: relative;
}

.fa-li {
  left: calc(var(--fa-li-width, 2em) * -1);
  position: absolute;
  text-align: center;
  width: var(--fa-li-width, 2em);
  line-height: inherit;
}

.fa-border {
  border-color: var(--fa-border-color, #eee);
  border-radius: var(--fa-border-radius, 0.1em);
  border-style: var(--fa-border-style, solid);
  border-width: var(--fa-border-width, 0.08em);
  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);
}

.fa-pull-left {
  float: left;
  margin-right: var(--fa-pull-margin, 0.3em);
}

.fa-pull-right {
  float: right;
  margin-left: var(--fa-pull-margin, 0.3em);
}

.fa-beat {
  -webkit-animation-name: fa-beat;
          animation-name: fa-beat;
  -webkit-animation-delay: var(--fa-animation-delay, 0s);
          animation-delay: var(--fa-animation-delay, 0s);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);
          animation-timing-function: var(--fa-animation-timing, ease-in-out);
}

.fa-bounce {
  -webkit-animation-name: fa-bounce;
          animation-name: fa-bounce;
  -webkit-animation-delay: var(--fa-animation-delay, 0s);
          animation-delay: var(--fa-animation-delay, 0s);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));
          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));
}

.fa-fade {
  -webkit-animation-name: fa-fade;
          animation-name: fa-fade;
  -webkit-animation-delay: var(--fa-animation-delay, 0s);
          animation-delay: var(--fa-animation-delay, 0s);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));
          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));
}

.fa-beat-fade {
  -webkit-animation-name: fa-beat-fade;
          animation-name: fa-beat-fade;
  -webkit-animation-delay: var(--fa-animation-delay, 0s);
          animation-delay: var(--fa-animation-delay, 0s);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));
          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));
}

.fa-flip {
  -webkit-animation-name: fa-flip;
          animation-name: fa-flip;
  -webkit-animation-delay: var(--fa-animation-delay, 0s);
          animation-delay: var(--fa-animation-delay, 0s);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);
          animation-timing-function: var(--fa-animation-timing, ease-in-out);
}

.fa-shake {
  -webkit-animation-name: fa-shake;
          animation-name: fa-shake;
  -webkit-animation-delay: var(--fa-animation-delay, 0s);
          animation-delay: var(--fa-animation-delay, 0s);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, linear);
          animation-timing-function: var(--fa-animation-timing, linear);
}

.fa-spin {
  -webkit-animation-name: fa-spin;
          animation-name: fa-spin;
  -webkit-animation-delay: var(--fa-animation-delay, 0s);
          animation-delay: var(--fa-animation-delay, 0s);
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 2s);
          animation-duration: var(--fa-animation-duration, 2s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, linear);
          animation-timing-function: var(--fa-animation-timing, linear);
}

.fa-spin-reverse {
  --fa-animation-direction: reverse;
}

.fa-pulse,
.fa-spin-pulse {
  -webkit-animation-name: fa-spin;
          animation-name: fa-spin;
  -webkit-animation-direction: var(--fa-animation-direction, normal);
          animation-direction: var(--fa-animation-direction, normal);
  -webkit-animation-duration: var(--fa-animation-duration, 1s);
          animation-duration: var(--fa-animation-duration, 1s);
  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);
          animation-iteration-count: var(--fa-animation-iteration-count, infinite);
  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));
          animation-timing-function: var(--fa-animation-timing, steps(8));
}

@media (prefers-reduced-motion: reduce) {
  .fa-beat,
.fa-bounce,
.fa-fade,
.fa-beat-fade,
.fa-flip,
.fa-pulse,
.fa-shake,
.fa-spin,
.fa-spin-pulse {
    -webkit-animation-delay: -1ms;
            animation-delay: -1ms;
    -webkit-animation-duration: 1ms;
            animation-duration: 1ms;
    -webkit-animation-iteration-count: 1;
            animation-iteration-count: 1;
    transition-delay: 0s;
    transition-duration: 0s;
  }
}
@-webkit-keyframes fa-beat {
  0%, 90% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  45% {
    -webkit-transform: scale(var(--fa-beat-scale, 1.25));
            transform: scale(var(--fa-beat-scale, 1.25));
  }
}
@keyframes fa-beat {
  0%, 90% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  45% {
    -webkit-transform: scale(var(--fa-beat-scale, 1.25));
            transform: scale(var(--fa-beat-scale, 1.25));
  }
}
@-webkit-keyframes fa-bounce {
  0% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
  10% {
    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);
            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);
  }
  30% {
    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));
            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));
  }
  50% {
    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);
            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);
  }
  57% {
    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));
            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));
  }
  64% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
  100% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
}
@keyframes fa-bounce {
  0% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
  10% {
    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);
            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);
  }
  30% {
    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));
            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));
  }
  50% {
    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);
            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);
  }
  57% {
    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));
            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));
  }
  64% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
  100% {
    -webkit-transform: scale(1, 1) translateY(0);
            transform: scale(1, 1) translateY(0);
  }
}
@-webkit-keyframes fa-fade {
  50% {
    opacity: var(--fa-fade-opacity, 0.4);
  }
}
@keyframes fa-fade {
  50% {
    opacity: var(--fa-fade-opacity, 0.4);
  }
}
@-webkit-keyframes fa-beat-fade {
  0%, 100% {
    opacity: var(--fa-beat-fade-opacity, 0.4);
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  50% {
    opacity: 1;
    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));
            transform: scale(var(--fa-beat-fade-scale, 1.125));
  }
}
@keyframes fa-beat-fade {
  0%, 100% {
    opacity: var(--fa-beat-fade-opacity, 0.4);
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  50% {
    opacity: 1;
    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));
            transform: scale(var(--fa-beat-fade-scale, 1.125));
  }
}
@-webkit-keyframes fa-flip {
  50% {
    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));
            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));
  }
}
@keyframes fa-flip {
  50% {
    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));
            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));
  }
}
@-webkit-keyframes fa-shake {
  0% {
    -webkit-transform: rotate(-15deg);
            transform: rotate(-15deg);
  }
  4% {
    -webkit-transform: rotate(15deg);
            transform: rotate(15deg);
  }
  8%, 24% {
    -webkit-transform: rotate(-18deg);
            transform: rotate(-18deg);
  }
  12%, 28% {
    -webkit-transform: rotate(18deg);
            transform: rotate(18deg);
  }
  16% {
    -webkit-transform: rotate(-22deg);
            transform: rotate(-22deg);
  }
  20% {
    -webkit-transform: rotate(22deg);
            transform: rotate(22deg);
  }
  32% {
    -webkit-transform: rotate(-12deg);
            transform: rotate(-12deg);
  }
  36% {
    -webkit-transform: rotate(12deg);
            transform: rotate(12deg);
  }
  40%, 100% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
}
@keyframes fa-shake {
  0% {
    -webkit-transform: rotate(-15deg);
            transform: rotate(-15deg);
  }
  4% {
    -webkit-transform: rotate(15deg);
            transform: rotate(15deg);
  }
  8%, 24% {
    -webkit-transform: rotate(-18deg);
            transform: rotate(-18deg);
  }
  12%, 28% {
    -webkit-transform: rotate(18deg);
            transform: rotate(18deg);
  }
  16% {
    -webkit-transform: rotate(-22deg);
            transform: rotate(-22deg);
  }
  20% {
    -webkit-transform: rotate(22deg);
            transform: rotate(22deg);
  }
  32% {
    -webkit-transform: rotate(-12deg);
            transform: rotate(-12deg);
  }
  36% {
    -webkit-transform: rotate(12deg);
            transform: rotate(12deg);
  }
  40%, 100% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
}
@-webkit-keyframes fa-spin {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
  }
}
@keyframes fa-spin {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
  }
}
.fa-rotate-90 {
  -webkit-transform: rotate(90deg);
          transform: rotate(90deg);
}

.fa-rotate-180 {
  -webkit-transform: rotate(180deg);
          transform: rotate(180deg);
}

.fa-rotate-270 {
  -webkit-transform: rotate(270deg);
          transform: rotate(270deg);
}

.fa-flip-horizontal {
  -webkit-transform: scale(-1, 1);
          transform: scale(-1, 1);
}

.fa-flip-vertical {
  -webkit-transform: scale(1, -1);
          transform: scale(1, -1);
}

.fa-flip-both,
.fa-flip-horizontal.fa-flip-vertical {
  -webkit-transform: scale(-1, -1);
          transform: scale(-1, -1);
}

.fa-rotate-by {
  -webkit-transform: rotate(var(--fa-rotate-angle, none));
          transform: rotate(var(--fa-rotate-angle, none));
}

.fa-stack {
  display: inline-block;
  vertical-align: middle;
  height: 2em;
  position: relative;
  width: 2.5em;
}

.fa-stack-1x,
.fa-stack-2x {
  bottom: 0;
  left: 0;
  margin: auto;
  position: absolute;
  right: 0;
  top: 0;
  z-index: var(--fa-stack-z-index, auto);
}

.svg-inline--fa.fa-stack-1x {
  height: 1em;
  width: 1.25em;
}
.svg-inline--fa.fa-stack-2x {
  height: 2em;
  width: 2.5em;
}

.fa-inverse {
  color: var(--fa-inverse, #fff);
}

.sr-only,
.fa-sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.sr-only-focusable:not(:focus),
.fa-sr-only-focusable:not(:focus) {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.svg-inline--fa .fa-primary {
  fill: var(--fa-primary-color, currentColor);
  opacity: var(--fa-primary-opacity, 1);
}

.svg-inline--fa .fa-secondary {
  fill: var(--fa-secondary-color, currentColor);
  opacity: var(--fa-secondary-opacity, 0.4);
}

.svg-inline--fa.fa-swap-opacity .fa-primary {
  opacity: var(--fa-secondary-opacity, 0.4);
}

.svg-inline--fa.fa-swap-opacity .fa-secondary {
  opacity: var(--fa-primary-opacity, 1);
}

.svg-inline--fa mask .fa-primary,
.svg-inline--fa mask .fa-secondary {
  fill: black;
}

.fad.fa-inverse,
.fa-duotone.fa-inverse {
  color: var(--fa-inverse, #fff);
}`;function nr(){var e=Gn,t=Kn,n=h.cssPrefix,r=h.replacementClass,a=fa;if(n!==e||r!==t){var i=new RegExp("\\.".concat(e,"\\-"),"g"),o=new RegExp("\\--".concat(e,"\\-"),"g"),s=new RegExp("\\.".concat(t),"g");a=a.replace(i,".".concat(n,"-")).replace(o,"--".concat(n,"-")).replace(s,".".concat(r))}return a}var dn=!1;function mt(){h.autoAddCss&&!dn&&(ra(nr()),dn=!0)}var ca={mixout:function(){return{dom:{css:nr,insertCss:mt}}},hooks:function(){return{beforeDOMElementCreation:function(){mt()},beforeI2svg:function(){mt()}}}},ce=pe||{};ce[fe]||(ce[fe]={});ce[fe].styles||(ce[fe].styles={});ce[fe].hooks||(ce[fe].hooks={});ce[fe].shims||(ce[fe].shims=[]);var ae=ce[fe],rr=[],la=function e(){U.removeEventListener("DOMContentLoaded",e),rt=1,rr.map(function(t){return t()})},rt=!1;ue&&(rt=(U.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(U.readyState),rt||U.addEventListener("DOMContentLoaded",la));function ua(e){ue&&(rt?setTimeout(e,0):rr.push(e))}function Ye(e){var t=e.tag,n=e.attributes,r=n===void 0?{}:n,a=e.children,i=a===void 0?[]:a;return typeof e=="string"?tr(e):"<".concat(t," ").concat(ia(r),">").concat(i.map(Ye).join(""),"</").concat(t,">")}function vn(e,t,n){if(e&&e[t]&&e[t][n])return{prefix:t,iconName:n,icon:e[t][n]}}var ma=function(t,n){return function(r,a,i,o){return t.call(n,r,a,i,o)}},dt=function(t,n,r,a){var i=Object.keys(t),o=i.length,s=a!==void 0?ma(n,a):n,f,c,l;for(r===void 0?(f=1,l=t[i[0]]):(f=0,l=r);f<o;f++)c=i[f],l=s(l,t[c],c,t);return l};function da(e){for(var t=[],n=0,r=e.length;n<r;){var a=e.charCodeAt(n++);if(a>=55296&&a<=56319&&n<r){var i=e.charCodeAt(n++);(i&64512)==56320?t.push(((a&1023)<<10)+(i&1023)+65536):(t.push(a),n--)}else t.push(a)}return t}function Pt(e){var t=da(e);return t.length===1?t[0].toString(16):null}function va(e,t){var n=e.length,r=e.charCodeAt(t),a;return r>=55296&&r<=56319&&n>t+1&&(a=e.charCodeAt(t+1),a>=56320&&a<=57343)?(r-55296)*1024+a-56320+65536:r}function pn(e){return Object.keys(e).reduce(function(t,n){var r=e[n],a=!!r.icon;return a?t[r.iconName]=r.icon:t[n]=r,t},{})}function It(e,t){var n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},r=n.skipHooks,a=r===void 0?!1:r,i=pn(t);typeof ae.hooks.addPack=="function"&&!a?ae.hooks.addPack(e,pn(t)):ae.styles[e]=p(p({},ae.styles[e]||{}),i),e==="fas"&&It("fa",t)}var Je,Qe,Ze,Oe=ae.styles,pa=ae.shims,ba=(Je={},H(Je,Y,Object.values(Le[Y])),H(Je,W,Object.values(Le[W])),Je),Xt=null,ar={},ir={},or={},sr={},fr={},ga=(Qe={},H(Qe,Y,Object.keys(je[Y])),H(Qe,W,Object.keys(je[W])),Qe);function ya(e){return~Qr.indexOf(e)}function ha(e,t){var n=t.split("-"),r=n[0],a=n.slice(1).join("-");return r===e&&a!==""&&!ya(a)?a:null}var cr=function(){var t=function(i){return dt(Oe,function(o,s,f){return o[f]=dt(s,i,{}),o},{})};ar=t(function(a,i,o){if(i[3]&&(a[i[3]]=o),i[2]){var s=i[2].filter(function(f){return typeof f=="number"});s.forEach(function(f){a[f.toString(16)]=o})}return a}),ir=t(function(a,i,o){if(a[o]=o,i[2]){var s=i[2].filter(function(f){return typeof f=="string"});s.forEach(function(f){a[f]=o})}return a}),fr=t(function(a,i,o){var s=i[2];return a[o]=o,s.forEach(function(f){a[f]=o}),a});var n="far"in Oe||h.autoFetchSvg,r=dt(pa,function(a,i){var o=i[0],s=i[1],f=i[2];return s==="far"&&!n&&(s="fas"),typeof o=="string"&&(a.names[o]={prefix:s,iconName:f}),typeof o=="number"&&(a.unicodes[o.toString(16)]={prefix:s,iconName:f}),a},{names:{},unicodes:{}});or=r.names,sr=r.unicodes,Xt=ft(h.styleDefault,{family:h.familyDefault})};na(function(e){Xt=ft(e.styleDefault,{family:h.familyDefault})});cr();function Gt(e,t){return(ar[e]||{})[t]}function xa(e,t){return(ir[e]||{})[t]}function we(e,t){return(fr[e]||{})[t]}function lr(e){return or[e]||{prefix:null,iconName:null}}function wa(e){var t=sr[e],n=Gt("fas",e);return t||(n?{prefix:"fas",iconName:n}:null)||{prefix:null,iconName:null}}function be(){return Xt}var Kt=function(){return{prefix:null,iconName:null,rest:[]}};function ft(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=t.family,r=n===void 0?Y:n,a=je[r][e],i=Me[r][e]||Me[r][a],o=e in ae.styles?e:null;return i||o||null}var bn=(Ze={},H(Ze,Y,Object.keys(Le[Y])),H(Ze,W,Object.keys(Le[W])),Ze);function ct(e){var t,n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=n.skipLookups,a=r===void 0?!1:r,i=(t={},H(t,Y,"".concat(h.cssPrefix,"-").concat(Y)),H(t,W,"".concat(h.cssPrefix,"-").concat(W)),t),o=null,s=Y;(e.includes(i[Y])||e.some(function(c){return bn[Y].includes(c)}))&&(s=Y),(e.includes(i[W])||e.some(function(c){return bn[W].includes(c)}))&&(s=W);var f=e.reduce(function(c,l){var u=ha(h.cssPrefix,l);if(Oe[l]?(l=ba[s].includes(l)?Br[s][l]:l,o=l,c.prefix=l):ga[s].indexOf(l)>-1?(o=l,c.prefix=ft(l,{family:s})):u?c.iconName=u:l!==h.replacementClass&&l!==i[Y]&&l!==i[W]&&c.rest.push(l),!a&&c.prefix&&c.iconName){var b=o==="fa"?lr(c.iconName):{},y=we(c.prefix,c.iconName);b.prefix&&(o=null),c.iconName=b.iconName||y||c.iconName,c.prefix=b.prefix||c.prefix,c.prefix==="far"&&!Oe.far&&Oe.fas&&!h.autoFetchSvg&&(c.prefix="fas")}return c},Kt());return(e.includes("fa-brands")||e.includes("fab"))&&(f.prefix="fab"),(e.includes("fa-duotone")||e.includes("fad"))&&(f.prefix="fad"),!f.prefix&&s===W&&(Oe.fass||h.autoFetchSvg)&&(f.prefix="fass",f.iconName=we(f.prefix,f.iconName)||f.iconName),(f.prefix==="fa"||o==="fa")&&(f.prefix=be()||"fas"),f}var ka=function(){function e(){jr(this,e),this.definitions={}}return Mr(e,[{key:"add",value:function(){for(var n=this,r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];var o=a.reduce(this._pullDefinitions,{});Object.keys(o).forEach(function(s){n.definitions[s]=p(p({},n.definitions[s]||{}),o[s]),It(s,o[s]);var f=Le[Y][s];f&&It(f,o[s]),cr()})}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(n,r){var a=r.prefix&&r.iconName&&r.icon?{0:r}:r;return Object.keys(a).map(function(i){var o=a[i],s=o.prefix,f=o.iconName,c=o.icon,l=c[2];n[s]||(n[s]={}),l.length>0&&l.forEach(function(u){typeof u=="string"&&(n[s][u]=c)}),n[s][f]=c}),n}}]),e}(),gn=[],Ae={},Ie={},Sa=Object.keys(Ie);function Ea(e,t){var n=t.mixoutsTo;return gn=e,Ae={},Object.keys(Ie).forEach(function(r){Sa.indexOf(r)===-1&&delete Ie[r]}),gn.forEach(function(r){var a=r.mixout?r.mixout():{};if(Object.keys(a).forEach(function(o){typeof a[o]=="function"&&(n[o]=a[o]),nt(a[o])==="object"&&Object.keys(a[o]).forEach(function(s){n[o]||(n[o]={}),n[o][s]=a[o][s]})}),r.hooks){var i=r.hooks();Object.keys(i).forEach(function(o){Ae[o]||(Ae[o]=[]),Ae[o].push(i[o])})}r.provides&&r.provides(Ie)}),n}function Tt(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),a=2;a<n;a++)r[a-2]=arguments[a];var i=Ae[e]||[];return i.forEach(function(o){t=o.apply(null,[t].concat(r))}),t}function Se(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var a=Ae[e]||[];a.forEach(function(i){i.apply(null,n)})}function le(){var e=arguments[0],t=Array.prototype.slice.call(arguments,1);return Ie[e]?Ie[e].apply(null,t):void 0}function Ct(e){e.prefix==="fa"&&(e.prefix="fas");var t=e.iconName,n=e.prefix||be();if(t)return t=we(n,t)||t,vn(ur.definitions,n,t)||vn(ae.styles,n,t)}var ur=new ka,Oa=function(){h.autoReplaceSvg=!1,h.observeMutations=!1,Se("noAuto")},Aa={i2svg:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};return ue?(Se("beforeI2svg",t),le("pseudoElements2svg",t),le("i2svg",t)):Promise.reject("Operation requires a DOM of some kind.")},watch:function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},n=t.autoReplaceSvgRoot;h.autoReplaceSvg===!1&&(h.autoReplaceSvg=!0),h.observeMutations=!0,ua(function(){Ia({autoReplaceSvgRoot:n}),Se("watch",t)})}},Pa={icon:function(t){if(t===null)return null;if(nt(t)==="object"&&t.prefix&&t.iconName)return{prefix:t.prefix,iconName:we(t.prefix,t.iconName)||t.iconName};if(Array.isArray(t)&&t.length===2){var n=t[1].indexOf("fa-")===0?t[1].slice(3):t[1],r=ft(t[0]);return{prefix:r,iconName:we(r,n)||n}}if(typeof t=="string"&&(t.indexOf("".concat(h.cssPrefix,"-"))>-1||t.match(Vr))){var a=ct(t.split(" "),{skipLookups:!0});return{prefix:a.prefix||be(),iconName:we(a.prefix,a.iconName)||a.iconName}}if(typeof t=="string"){var i=be();return{prefix:i,iconName:we(i,t)||t}}}},ne={noAuto:Oa,config:h,dom:Aa,parse:Pa,library:ur,findIconDefinition:Ct,toHtml:Ye},Ia=function(){var t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},n=t.autoReplaceSvgRoot,r=n===void 0?U:n;(Object.keys(ae.styles).length>0||h.autoFetchSvg)&&ue&&h.autoReplaceSvg&&ne.dom.i2svg({node:r})};function lt(e,t){return Object.defineProperty(e,"abstract",{get:t}),Object.defineProperty(e,"html",{get:function(){return e.abstract.map(function(r){return Ye(r)})}}),Object.defineProperty(e,"node",{get:function(){if(ue){var r=U.createElement("div");return r.innerHTML=e.html,r.children}}}),e}function Ta(e){var t=e.children,n=e.main,r=e.mask,a=e.attributes,i=e.styles,o=e.transform;if(Vt(o)&&n.found&&!r.found){var s=n.width,f=n.height,c={x:s/f/2,y:.5};a.style=st(p(p({},i),{},{"transform-origin":"".concat(c.x+o.x/16,"em ").concat(c.y+o.y/16,"em")}))}return[{tag:"svg",attributes:a,children:t}]}function Ca(e){var t=e.prefix,n=e.iconName,r=e.children,a=e.attributes,i=e.symbol,o=i===!0?"".concat(t,"-").concat(h.cssPrefix,"-").concat(n):i;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:p(p({},a),{},{id:o}),children:r}]}]}function Jt(e){var t=e.icons,n=t.main,r=t.mask,a=e.prefix,i=e.iconName,o=e.transform,s=e.symbol,f=e.title,c=e.maskId,l=e.titleId,u=e.extra,b=e.watchable,y=b===void 0?!1:b,O=r.found?r:n,w=O.width,x=O.height,T=a==="fak",$=[h.replacementClass,i?"".concat(h.cssPrefix,"-").concat(i):""].filter(function(Q){return u.classes.indexOf(Q)===-1}).filter(function(Q){return Q!==""||!!Q}).concat(u.classes).join(" "),k={children:[],attributes:p(p({},u.attributes),{},{"data-prefix":a,"data-icon":i,class:$,role:u.attributes.role||"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 ".concat(w," ").concat(x)})},C=T&&!~u.classes.indexOf("fa-fw")?{width:"".concat(w/x*16*.0625,"em")}:{};y&&(k.attributes[ke]=""),f&&(k.children.push({tag:"title",attributes:{id:k.attributes["aria-labelledby"]||"title-".concat(l||De())},children:[f]}),delete k.attributes.title);var m=p(p({},k),{},{prefix:a,iconName:i,main:n,mask:r,maskId:c,transform:o,symbol:s,styles:p(p({},C),u.styles)}),B=r.found&&n.found?le("generateAbstractMask",m)||{children:[],attributes:{}}:le("generateAbstractIcon",m)||{children:[],attributes:{}},te=B.children,se=B.attributes;return m.children=te,m.attributes=se,s?Ca(m):Ta(m)}function yn(e){var t=e.content,n=e.width,r=e.height,a=e.transform,i=e.title,o=e.extra,s=e.watchable,f=s===void 0?!1:s,c=p(p(p({},o.attributes),i?{title:i}:{}),{},{class:o.classes.join(" ")});f&&(c[ke]="");var l=p({},o.styles);Vt(a)&&(l.transform=sa({transform:a,startCentered:!0,width:n,height:r}),l["-webkit-transform"]=l.transform);var u=st(l);u.length>0&&(c.style=u);var b=[];return b.push({tag:"span",attributes:c,children:[t]}),i&&b.push({tag:"span",attributes:{class:"sr-only"},children:[i]}),b}function _a(e){var t=e.content,n=e.title,r=e.extra,a=p(p(p({},r.attributes),n?{title:n}:{}),{},{class:r.classes.join(" ")}),i=st(r.styles);i.length>0&&(a.style=i);var o=[];return o.push({tag:"span",attributes:a,children:[t]}),n&&o.push({tag:"span",attributes:{class:"sr-only"},children:[n]}),o}var vt=ae.styles;function _t(e){var t=e[0],n=e[1],r=e.slice(4),a=Yt(r,1),i=a[0],o=null;return Array.isArray(i)?o={tag:"g",attributes:{class:"".concat(h.cssPrefix,"-").concat(xe.GROUP)},children:[{tag:"path",attributes:{class:"".concat(h.cssPrefix,"-").concat(xe.SECONDARY),fill:"currentColor",d:i[0]}},{tag:"path",attributes:{class:"".concat(h.cssPrefix,"-").concat(xe.PRIMARY),fill:"currentColor",d:i[1]}}]}:o={tag:"path",attributes:{fill:"currentColor",d:i}},{found:!0,width:t,height:n,icon:o}}var Ra={found:!1,width:512,height:512};function Na(e,t){!Jn&&!h.showMissingIcons&&e&&console.error('Icon with name "'.concat(e,'" and prefix "').concat(t,'" is missing.'))}function Rt(e,t){var n=t;return t==="fa"&&h.styleDefault!==null&&(t=be()),new Promise(function(r,a){if(le("missingIconAbstract"),n==="fa"){var i=lr(e)||{};e=i.iconName||e,t=i.prefix||t}if(e&&t&&vt[t]&&vt[t][e]){var o=vt[t][e];return r(_t(o))}Na(e,t),r(p(p({},Ra),{},{icon:h.showMissingIcons&&e?le("missingIconAbstract")||{}:{}}))})}var hn=function(){},Nt=h.measurePerformance&&He&&He.mark&&He.measure?He:{mark:hn,measure:hn},_e='FA "6.2.1"',ja=function(t){return Nt.mark("".concat(_e," ").concat(t," begins")),function(){return mr(t)}},mr=function(t){Nt.mark("".concat(_e," ").concat(t," ends")),Nt.measure("".concat(_e," ").concat(t),"".concat(_e," ").concat(t," begins"),"".concat(_e," ").concat(t," ends"))},Qt={begin:ja,end:mr},et=function(){};function xn(e){var t=e.getAttribute?e.getAttribute(ke):null;return typeof t=="string"}function Ma(e){var t=e.getAttribute?e.getAttribute(qt):null,n=e.getAttribute?e.getAttribute(Wt):null;return t&&n}function La(e){return e&&e.classList&&e.classList.contains&&e.classList.contains(h.replacementClass)}function Fa(){if(h.autoReplaceSvg===!0)return tt.replace;var e=tt[h.autoReplaceSvg];return e||tt.replace}function Da(e){return U.createElementNS("http://www.w3.org/2000/svg",e)}function $a(e){return U.createElement(e)}function dr(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=t.ceFn,r=n===void 0?e.tag==="svg"?Da:$a:n;if(typeof e=="string")return U.createTextNode(e);var a=r(e.tag);Object.keys(e.attributes||[]).forEach(function(o){a.setAttribute(o,e.attributes[o])});var i=e.children||[];return i.forEach(function(o){a.appendChild(dr(o,{ceFn:r}))}),a}function za(e){var t=" ".concat(e.outerHTML," ");return t="".concat(t,"Font Awesome fontawesome.com "),t}var tt={replace:function(t){var n=t[0];if(n.parentNode)if(t[1].forEach(function(a){n.parentNode.insertBefore(dr(a),n)}),n.getAttribute(ke)===null&&h.keepOriginalSource){var r=U.createComment(za(n));n.parentNode.replaceChild(r,n)}else n.remove()},nest:function(t){var n=t[0],r=t[1];if(~Bt(n).indexOf(h.replacementClass))return tt.replace(t);var a=new RegExp("".concat(h.cssPrefix,"-.*"));if(delete r[0].attributes.id,r[0].attributes.class){var i=r[0].attributes.class.split(" ").reduce(function(s,f){return f===h.replacementClass||f.match(a)?s.toSvg.push(f):s.toNode.push(f),s},{toNode:[],toSvg:[]});r[0].attributes.class=i.toSvg.join(" "),i.toNode.length===0?n.removeAttribute("class"):n.setAttribute("class",i.toNode.join(" "))}var o=r.map(function(s){return Ye(s)}).join(`
`);n.setAttribute(ke,""),n.innerHTML=o}};function wn(e){e()}function vr(e,t){var n=typeof t=="function"?t:et;if(e.length===0)n();else{var r=wn;h.mutateApproach===Wr&&(r=pe.requestAnimationFrame||wn),r(function(){var a=Fa(),i=Qt.begin("mutate");e.map(a),i(),n()})}}var Zt=!1;function pr(){Zt=!0}function jt(){Zt=!1}var at=null;function kn(e){if(un&&h.observeMutations){var t=e.treeCallback,n=t===void 0?et:t,r=e.nodeCallback,a=r===void 0?et:r,i=e.pseudoElementsCallback,o=i===void 0?et:i,s=e.observeMutationsRoot,f=s===void 0?U:s;at=new un(function(c){if(!Zt){var l=be();Ce(c).forEach(function(u){if(u.type==="childList"&&u.addedNodes.length>0&&!xn(u.addedNodes[0])&&(h.searchPseudoElements&&o(u.target),n(u.target)),u.type==="attributes"&&u.target.parentNode&&h.searchPseudoElements&&o(u.target.parentNode),u.type==="attributes"&&xn(u.target)&&~Jr.indexOf(u.attributeName))if(u.attributeName==="class"&&Ma(u.target)){var b=ct(Bt(u.target)),y=b.prefix,O=b.iconName;u.target.setAttribute(qt,y||l),O&&u.target.setAttribute(Wt,O)}else La(u.target)&&a(u.target)})}}),ue&&at.observe(f,{childList:!0,attributes:!0,characterData:!0,subtree:!0})}}function Ya(){at&&at.disconnect()}function Ua(e){var t=e.getAttribute("style"),n=[];return t&&(n=t.split(";").reduce(function(r,a){var i=a.split(":"),o=i[0],s=i.slice(1);return o&&s.length>0&&(r[o]=s.join(":").trim()),r},{})),n}function qa(e){var t=e.getAttribute("data-prefix"),n=e.getAttribute("data-icon"),r=e.innerText!==void 0?e.innerText.trim():"",a=ct(Bt(e));return a.prefix||(a.prefix=be()),t&&n&&(a.prefix=t,a.iconName=n),a.iconName&&a.prefix||(a.prefix&&r.length>0&&(a.iconName=xa(a.prefix,e.innerText)||Gt(a.prefix,Pt(e.innerText))),!a.iconName&&h.autoFetchSvg&&e.firstChild&&e.firstChild.nodeType===Node.TEXT_NODE&&(a.iconName=e.firstChild.data)),a}function Wa(e){var t=Ce(e.attributes).reduce(function(a,i){return a.name!=="class"&&a.name!=="style"&&(a[i.name]=i.value),a},{}),n=e.getAttribute("title"),r=e.getAttribute("data-fa-title-id");return h.autoA11y&&(n?t["aria-labelledby"]="".concat(h.replacementClass,"-title-").concat(r||De()):(t["aria-hidden"]="true",t.focusable="false")),t}function Ha(){return{iconName:null,title:null,titleId:null,prefix:null,transform:oe,symbol:!1,mask:{iconName:null,prefix:null,rest:[]},maskId:null,extra:{classes:[],styles:{},attributes:{}}}}function Sn(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{styleParser:!0},n=qa(e),r=n.iconName,a=n.prefix,i=n.rest,o=Wa(e),s=Tt("parseNodeAttributes",{},e),f=t.styleParser?Ua(e):[];return p({iconName:r,title:e.getAttribute("title"),titleId:e.getAttribute("data-fa-title-id"),prefix:a,transform:oe,mask:{iconName:null,prefix:null,rest:[]},maskId:null,symbol:!1,extra:{classes:i,styles:f,attributes:o}},s)}var Ba=ae.styles;function br(e){var t=h.autoReplaceSvg==="nest"?Sn(e,{styleParser:!1}):Sn(e);return~t.extra.classes.indexOf(Qn)?le("generateLayersText",e,t):le("generateSvgReplacementMutation",e,t)}var ge=new Set;Ht.map(function(e){ge.add("fa-".concat(e))});Object.keys(je[Y]).map(ge.add.bind(ge));Object.keys(je[W]).map(ge.add.bind(ge));ge=$e(ge);function En(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null;if(!ue)return Promise.resolve();var n=U.documentElement.classList,r=function(u){return n.add("".concat(mn,"-").concat(u))},a=function(u){return n.remove("".concat(mn,"-").concat(u))},i=h.autoFetchSvg?ge:Ht.map(function(l){return"fa-".concat(l)}).concat(Object.keys(Ba));i.includes("fa")||i.push("fa");var o=[".".concat(Qn,":not([").concat(ke,"])")].concat(i.map(function(l){return".".concat(l,":not([").concat(ke,"])")})).join(", ");if(o.length===0)return Promise.resolve();var s=[];try{s=Ce(e.querySelectorAll(o))}catch(l){}if(s.length>0)r("pending"),a("complete");else return Promise.resolve();var f=Qt.begin("onTree"),c=s.reduce(function(l,u){try{var b=br(u);b&&l.push(b)}catch(y){Jn||y.name==="MissingIcon"&&console.error(y)}return l},[]);return new Promise(function(l,u){Promise.all(c).then(function(b){vr(b,function(){r("active"),r("complete"),a("pending"),typeof t=="function"&&t(),f(),l()})}).catch(function(b){f(),u(b)})})}function Va(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null;br(e).then(function(n){n&&vr([n],t)})}function Xa(e){return function(t){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=(t||{}).icon?t:Ct(t||{}),a=n.mask;return a&&(a=(a||{}).icon?a:Ct(a||{})),e(r,p(p({},n),{},{mask:a}))}}var Ga=function(t){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r=n.transform,a=r===void 0?oe:r,i=n.symbol,o=i===void 0?!1:i,s=n.mask,f=s===void 0?null:s,c=n.maskId,l=c===void 0?null:c,u=n.title,b=u===void 0?null:u,y=n.titleId,O=y===void 0?null:y,w=n.classes,x=w===void 0?[]:w,T=n.attributes,$=T===void 0?{}:T,k=n.styles,C=k===void 0?{}:k;if(t){var m=t.prefix,B=t.iconName,te=t.icon;return lt(p({type:"icon"},t),function(){return Se("beforeDOMElementCreation",{iconDefinition:t,params:n}),h.autoA11y&&(b?$["aria-labelledby"]="".concat(h.replacementClass,"-title-").concat(O||De()):($["aria-hidden"]="true",$.focusable="false")),Jt({icons:{main:_t(te),mask:f?_t(f.icon):{found:!1,width:null,height:null,icon:{}}},prefix:m,iconName:B,transform:p(p({},oe),a),symbol:o,title:b,maskId:l,titleId:O,extra:{attributes:$,styles:C,classes:x}})})}},Ka={mixout:function(){return{icon:Xa(Ga)}},hooks:function(){return{mutationObserverCallbacks:function(n){return n.treeCallback=En,n.nodeCallback=Va,n}}},provides:function(t){t.i2svg=function(n){var r=n.node,a=r===void 0?U:r,i=n.callback,o=i===void 0?function(){}:i;return En(a,o)},t.generateSvgReplacementMutation=function(n,r){var a=r.iconName,i=r.title,o=r.titleId,s=r.prefix,f=r.transform,c=r.symbol,l=r.mask,u=r.maskId,b=r.extra;return new Promise(function(y,O){Promise.all([Rt(a,s),l.iconName?Rt(l.iconName,l.prefix):Promise.resolve({found:!1,width:512,height:512,icon:{}})]).then(function(w){var x=Yt(w,2),T=x[0],$=x[1];y([n,Jt({icons:{main:T,mask:$},prefix:s,iconName:a,transform:f,symbol:c,maskId:u,title:i,titleId:o,extra:b,watchable:!0})])}).catch(O)})},t.generateAbstractIcon=function(n){var r=n.children,a=n.attributes,i=n.main,o=n.transform,s=n.styles,f=st(s);f.length>0&&(a.style=f);var c;return Vt(o)&&(c=le("generateAbstractTransformGrouping",{main:i,transform:o,containerWidth:i.width,iconWidth:i.width})),r.push(c||i.icon),{children:r,attributes:a}}}},Ja={mixout:function(){return{layer:function(n){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},a=r.classes,i=a===void 0?[]:a;return lt({type:"layer"},function(){Se("beforeDOMElementCreation",{assembler:n,params:r});var o=[];return n(function(s){Array.isArray(s)?s.map(function(f){o=o.concat(f.abstract)}):o=o.concat(s.abstract)}),[{tag:"span",attributes:{class:["".concat(h.cssPrefix,"-layers")].concat($e(i)).join(" ")},children:o}]})}}}},Qa={mixout:function(){return{counter:function(n){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},a=r.title,i=a===void 0?null:a,o=r.classes,s=o===void 0?[]:o,f=r.attributes,c=f===void 0?{}:f,l=r.styles,u=l===void 0?{}:l;return lt({type:"counter",content:n},function(){return Se("beforeDOMElementCreation",{content:n,params:r}),_a({content:n.toString(),title:i,extra:{attributes:c,styles:u,classes:["".concat(h.cssPrefix,"-layers-counter")].concat($e(s))}})})}}}},Za={mixout:function(){return{text:function(n){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},a=r.transform,i=a===void 0?oe:a,o=r.title,s=o===void 0?null:o,f=r.classes,c=f===void 0?[]:f,l=r.attributes,u=l===void 0?{}:l,b=r.styles,y=b===void 0?{}:b;return lt({type:"text",content:n},function(){return Se("beforeDOMElementCreation",{content:n,params:r}),yn({content:n,transform:p(p({},oe),i),title:s,extra:{attributes:u,styles:y,classes:["".concat(h.cssPrefix,"-layers-text")].concat($e(c))}})})}}},provides:function(t){t.generateLayersText=function(n,r){var a=r.title,i=r.transform,o=r.extra,s=null,f=null;if(Xn){var c=parseInt(getComputedStyle(n).fontSize,10),l=n.getBoundingClientRect();s=l.width/c,f=l.height/c}return h.autoA11y&&!a&&(o.attributes["aria-hidden"]="true"),Promise.resolve([n,yn({content:n.innerHTML,width:s,height:f,transform:i,title:a,extra:o,watchable:!0})])}}},ei=new RegExp('"',"ug"),On=[1105920,1112319];function ti(e){var t=e.replace(ei,""),n=va(t,0),r=n>=On[0]&&n<=On[1],a=t.length===2?t[0]===t[1]:!1;return{value:Pt(a?t[0]:t),isSecondary:r||a}}function An(e,t){var n="".concat(qr).concat(t.replace(":","-"));return new Promise(function(r,a){if(e.getAttribute(n)!==null)return r();var i=Ce(e.children),o=i.filter(function(te){return te.getAttribute(At)===t})[0],s=pe.getComputedStyle(e,t),f=s.getPropertyValue("font-family").match(Xr),c=s.getPropertyValue("font-weight"),l=s.getPropertyValue("content");if(o&&!f)return e.removeChild(o),r();if(f&&l!=="none"&&l!==""){var u=s.getPropertyValue("content"),b=~["Sharp"].indexOf(f[2])?W:Y,y=~["Solid","Regular","Light","Thin","Duotone","Brands","Kit"].indexOf(f[2])?Me[b][f[2].toLowerCase()]:Gr[b][c],O=ti(u),w=O.value,x=O.isSecondary,T=f[0].startsWith("FontAwesome"),$=Gt(y,w),k=$;if(T){var C=wa(w);C.iconName&&C.prefix&&($=C.iconName,y=C.prefix)}if($&&!x&&(!o||o.getAttribute(qt)!==y||o.getAttribute(Wt)!==k)){e.setAttribute(n,k),o&&e.removeChild(o);var m=Ha(),B=m.extra;B.attributes[At]=t,Rt($,y).then(function(te){var se=Jt(p(p({},m),{},{icons:{main:te,mask:Kt()},prefix:y,iconName:k,extra:B,watchable:!0})),Q=U.createElement("svg");t==="::before"?e.insertBefore(Q,e.firstChild):e.appendChild(Q),Q.outerHTML=se.map(function(q){return Ye(q)}).join(`
`),e.removeAttribute(n),r()}).catch(a)}else r()}else r()})}function ni(e){return Promise.all([An(e,"::before"),An(e,"::after")])}function ri(e){return e.parentNode!==document.head&&!~Hr.indexOf(e.tagName.toUpperCase())&&!e.getAttribute(At)&&(!e.parentNode||e.parentNode.tagName!=="svg")}function Pn(e){if(ue)return new Promise(function(t,n){var r=Ce(e.querySelectorAll("*")).filter(ri).map(ni),a=Qt.begin("searchPseudoElements");pr(),Promise.all(r).then(function(){a(),jt(),t()}).catch(function(){a(),jt(),n()})})}var ai={hooks:function(){return{mutationObserverCallbacks:function(n){return n.pseudoElementsCallback=Pn,n}}},provides:function(t){t.pseudoElements2svg=function(n){var r=n.node,a=r===void 0?U:r;h.searchPseudoElements&&Pn(a)}}},In=!1,ii={mixout:function(){return{dom:{unwatch:function(){pr(),In=!0}}}},hooks:function(){return{bootstrap:function(){kn(Tt("mutationObserverCallbacks",{}))},noAuto:function(){Ya()},watch:function(n){var r=n.observeMutationsRoot;In?jt():kn(Tt("mutationObserverCallbacks",{observeMutationsRoot:r}))}}}},Tn=function(t){var n={size:16,x:0,y:0,flipX:!1,flipY:!1,rotate:0};return t.toLowerCase().split(" ").reduce(function(r,a){var i=a.toLowerCase().split("-"),o=i[0],s=i.slice(1).join("-");if(o&&s==="h")return r.flipX=!0,r;if(o&&s==="v")return r.flipY=!0,r;if(s=parseFloat(s),isNaN(s))return r;switch(o){case"grow":r.size=r.size+s;break;case"shrink":r.size=r.size-s;break;case"left":r.x=r.x-s;break;case"right":r.x=r.x+s;break;case"up":r.y=r.y-s;break;case"down":r.y=r.y+s;break;case"rotate":r.rotate=r.rotate+s;break}return r},n)},oi={mixout:function(){return{parse:{transform:function(n){return Tn(n)}}}},hooks:function(){return{parseNodeAttributes:function(n,r){var a=r.getAttribute("data-fa-transform");return a&&(n.transform=Tn(a)),n}}},provides:function(t){t.generateAbstractTransformGrouping=function(n){var r=n.main,a=n.transform,i=n.containerWidth,o=n.iconWidth,s={transform:"translate(".concat(i/2," 256)")},f="translate(".concat(a.x*32,", ").concat(a.y*32,") "),c="scale(".concat(a.size/16*(a.flipX?-1:1),", ").concat(a.size/16*(a.flipY?-1:1),") "),l="rotate(".concat(a.rotate," 0 0)"),u={transform:"".concat(f," ").concat(c," ").concat(l)},b={transform:"translate(".concat(o/2*-1," -256)")},y={outer:s,inner:u,path:b};return{tag:"g",attributes:p({},y.outer),children:[{tag:"g",attributes:p({},y.inner),children:[{tag:r.icon.tag,children:r.icon.children,attributes:p(p({},r.icon.attributes),y.path)}]}]}}}},pt={x:0,y:0,width:"100%",height:"100%"};function Cn(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return e.attributes&&(e.attributes.fill||t)&&(e.attributes.fill="black"),e}function si(e){return e.tag==="g"?e.children:[e]}var fi={hooks:function(){return{parseNodeAttributes:function(n,r){var a=r.getAttribute("data-fa-mask"),i=a?ct(a.split(" ").map(function(o){return o.trim()})):Kt();return i.prefix||(i.prefix=be()),n.mask=i,n.maskId=r.getAttribute("data-fa-mask-id"),n}}},provides:function(t){t.generateAbstractMask=function(n){var r=n.children,a=n.attributes,i=n.main,o=n.mask,s=n.maskId,f=n.transform,c=i.width,l=i.icon,u=o.width,b=o.icon,y=oa({transform:f,containerWidth:u,iconWidth:c}),O={tag:"rect",attributes:p(p({},pt),{},{fill:"white"})},w=l.children?{children:l.children.map(Cn)}:{},x={tag:"g",attributes:p({},y.inner),children:[Cn(p({tag:l.tag,attributes:p(p({},l.attributes),y.path)},w))]},T={tag:"g",attributes:p({},y.outer),children:[x]},$="mask-".concat(s||De()),k="clip-".concat(s||De()),C={tag:"mask",attributes:p(p({},pt),{},{id:$,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[O,T]},m={tag:"defs",children:[{tag:"clipPath",attributes:{id:k},children:si(b)},C]};return r.push(m,{tag:"rect",attributes:p({fill:"currentColor","clip-path":"url(#".concat(k,")"),mask:"url(#".concat($,")")},pt)}),{children:r,attributes:a}}}},ci={provides:function(t){var n=!1;pe.matchMedia&&(n=pe.matchMedia("(prefers-reduced-motion: reduce)").matches),t.missingIconAbstract=function(){var r=[],a={fill:"currentColor"},i={attributeType:"XML",repeatCount:"indefinite",dur:"2s"};r.push({tag:"path",attributes:p(p({},a),{},{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"})});var o=p(p({},i),{},{attributeName:"opacity"}),s={tag:"circle",attributes:p(p({},a),{},{cx:"256",cy:"364",r:"28"}),children:[]};return n||s.children.push({tag:"animate",attributes:p(p({},i),{},{attributeName:"r",values:"28;14;28;28;14;28;"})},{tag:"animate",attributes:p(p({},o),{},{values:"1;0;1;1;0;1;"})}),r.push(s),r.push({tag:"path",attributes:p(p({},a),{},{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),children:n?[]:[{tag:"animate",attributes:p(p({},o),{},{values:"1;0;0;0;0;1;"})}]}),n||r.push({tag:"path",attributes:p(p({},a),{},{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),children:[{tag:"animate",attributes:p(p({},o),{},{values:"0;0;1;1;0;0;"})}]}),{tag:"g",attributes:{class:"missing"},children:r}}}},li={hooks:function(){return{parseNodeAttributes:function(n,r){var a=r.getAttribute("data-fa-symbol"),i=a===null?!1:a===""?!0:a;return n.symbol=i,n}}}},ui=[ca,Ka,Ja,Qa,Za,ai,ii,oi,fi,ci,li];Ea(ui,{mixoutsTo:ne});ne.noAuto;ne.config;ne.library;ne.dom;var Mt=ne.parse;ne.findIconDefinition;ne.toHtml;var mi=ne.icon;ne.layer;ne.text;ne.counter;var E={},_n={get exports(){return E},set exports(e){E=e}},it={},di={get exports(){return it},set exports(e){it=e}},L={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Rn;function vi(){if(Rn)return L;Rn=1;var e=typeof Symbol=="function"&&Symbol.for,t=e?Symbol.for("react.element"):60103,n=e?Symbol.for("react.portal"):60106,r=e?Symbol.for("react.fragment"):60107,a=e?Symbol.for("react.strict_mode"):60108,i=e?Symbol.for("react.profiler"):60114,o=e?Symbol.for("react.provider"):60109,s=e?Symbol.for("react.context"):60110,f=e?Symbol.for("react.async_mode"):60111,c=e?Symbol.for("react.concurrent_mode"):60111,l=e?Symbol.for("react.forward_ref"):60112,u=e?Symbol.for("react.suspense"):60113,b=e?Symbol.for("react.suspense_list"):60120,y=e?Symbol.for("react.memo"):60115,O=e?Symbol.for("react.lazy"):60116,w=e?Symbol.for("react.block"):60121,x=e?Symbol.for("react.fundamental"):60117,T=e?Symbol.for("react.responder"):60118,$=e?Symbol.for("react.scope"):60119;function k(m){if(typeof m=="object"&&m!==null){var B=m.$$typeof;switch(B){case t:switch(m=m.type,m){case f:case c:case r:case i:case a:case u:return m;default:switch(m=m&&m.$$typeof,m){case s:case l:case O:case y:case o:return m;default:return B}}case n:return B}}}function C(m){return k(m)===c}return L.AsyncMode=f,L.ConcurrentMode=c,L.ContextConsumer=s,L.ContextProvider=o,L.Element=t,L.ForwardRef=l,L.Fragment=r,L.Lazy=O,L.Memo=y,L.Portal=n,L.Profiler=i,L.StrictMode=a,L.Suspense=u,L.isAsyncMode=function(m){return C(m)||k(m)===f},L.isConcurrentMode=C,L.isContextConsumer=function(m){return k(m)===s},L.isContextProvider=function(m){return k(m)===o},L.isElement=function(m){return typeof m=="object"&&m!==null&&m.$$typeof===t},L.isForwardRef=function(m){return k(m)===l},L.isFragment=function(m){return k(m)===r},L.isLazy=function(m){return k(m)===O},L.isMemo=function(m){return k(m)===y},L.isPortal=function(m){return k(m)===n},L.isProfiler=function(m){return k(m)===i},L.isStrictMode=function(m){return k(m)===a},L.isSuspense=function(m){return k(m)===u},L.isValidElementType=function(m){return typeof m=="string"||typeof m=="function"||m===r||m===c||m===i||m===a||m===u||m===b||typeof m=="object"&&m!==null&&(m.$$typeof===O||m.$$typeof===y||m.$$typeof===o||m.$$typeof===s||m.$$typeof===l||m.$$typeof===x||m.$$typeof===T||m.$$typeof===$||m.$$typeof===w)},L.typeOf=k,L}var F={};/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Nn;function pi(){return Nn||(Nn=1,process.env.NODE_ENV!=="production"&&function(){var e=typeof Symbol=="function"&&Symbol.for,t=e?Symbol.for("react.element"):60103,n=e?Symbol.for("react.portal"):60106,r=e?Symbol.for("react.fragment"):60107,a=e?Symbol.for("react.strict_mode"):60108,i=e?Symbol.for("react.profiler"):60114,o=e?Symbol.for("react.provider"):60109,s=e?Symbol.for("react.context"):60110,f=e?Symbol.for("react.async_mode"):60111,c=e?Symbol.for("react.concurrent_mode"):60111,l=e?Symbol.for("react.forward_ref"):60112,u=e?Symbol.for("react.suspense"):60113,b=e?Symbol.for("react.suspense_list"):60120,y=e?Symbol.for("react.memo"):60115,O=e?Symbol.for("react.lazy"):60116,w=e?Symbol.for("react.block"):60121,x=e?Symbol.for("react.fundamental"):60117,T=e?Symbol.for("react.responder"):60118,$=e?Symbol.for("react.scope"):60119;function k(v){return typeof v=="string"||typeof v=="function"||v===r||v===c||v===i||v===a||v===u||v===b||typeof v=="object"&&v!==null&&(v.$$typeof===O||v.$$typeof===y||v.$$typeof===o||v.$$typeof===s||v.$$typeof===l||v.$$typeof===x||v.$$typeof===T||v.$$typeof===$||v.$$typeof===w)}function C(v){if(typeof v=="object"&&v!==null){var ie=v.$$typeof;switch(ie){case t:var qe=v.type;switch(qe){case f:case c:case r:case i:case a:case u:return qe;default:var tn=qe&&qe.$$typeof;switch(tn){case s:case l:case O:case y:case o:return tn;default:return ie}}case n:return ie}}}var m=f,B=c,te=s,se=o,Q=t,q=l,G=r,V=O,K=y,re=n,me=i,Z=a,J=u,ye=!1;function Ee(v){return ye||(ye=!0,console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")),d(v)||C(v)===f}function d(v){return C(v)===c}function g(v){return C(v)===s}function _(v){return C(v)===o}function P(v){return typeof v=="object"&&v!==null&&v.$$typeof===t}function S(v){return C(v)===l}function R(v){return C(v)===r}function A(v){return C(v)===O}function I(v){return C(v)===y}function N(v){return C(v)===n}function z(v){return C(v)===i}function j(v){return C(v)===a}function ee(v){return C(v)===u}F.AsyncMode=m,F.ConcurrentMode=B,F.ContextConsumer=te,F.ContextProvider=se,F.Element=Q,F.ForwardRef=q,F.Fragment=G,F.Lazy=V,F.Memo=K,F.Portal=re,F.Profiler=me,F.StrictMode=Z,F.Suspense=J,F.isAsyncMode=Ee,F.isConcurrentMode=d,F.isContextConsumer=g,F.isContextProvider=_,F.isElement=P,F.isForwardRef=S,F.isFragment=R,F.isLazy=A,F.isMemo=I,F.isPortal=N,F.isProfiler=z,F.isStrictMode=j,F.isSuspense=ee,F.isValidElementType=k,F.typeOf=C}()),F}var jn;function gr(){return jn||(jn=1,function(e){process.env.NODE_ENV==="production"?e.exports=vi():e.exports=pi()}(di)),it}/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var bt,Mn;function bi(){if(Mn)return bt;Mn=1;var e=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function r(i){if(i==null)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(i)}function a(){try{if(!Object.assign)return!1;var i=new String("abc");if(i[5]="de",Object.getOwnPropertyNames(i)[0]==="5")return!1;for(var o={},s=0;s<10;s++)o["_"+String.fromCharCode(s)]=s;var f=Object.getOwnPropertyNames(o).map(function(l){return o[l]});if(f.join("")!=="0123456789")return!1;var c={};return"abcdefghijklmnopqrst".split("").forEach(function(l){c[l]=l}),Object.keys(Object.assign({},c)).join("")==="abcdefghijklmnopqrst"}catch(l){return!1}}return bt=a()?Object.assign:function(i,o){for(var s,f=r(i),c,l=1;l<arguments.length;l++){s=Object(arguments[l]);for(var u in s)t.call(s,u)&&(f[u]=s[u]);if(e){c=e(s);for(var b=0;b<c.length;b++)n.call(s,c[b])&&(f[c[b]]=s[c[b]])}}return f},bt}var gt,Ln;function en(){if(Ln)return gt;Ln=1;var e="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";return gt=e,gt}var yt,Fn;function yr(){return Fn||(Fn=1,yt=Function.call.bind(Object.prototype.hasOwnProperty)),yt}var ht,Dn;function gi(){if(Dn)return ht;Dn=1;var e=function(){};if(process.env.NODE_ENV!=="production"){var t=en(),n={},r=yr();e=function(i){var o="Warning: "+i;typeof console!="undefined"&&console.error(o);try{throw new Error(o)}catch(s){}}}function a(i,o,s,f,c){if(process.env.NODE_ENV!=="production"){for(var l in i)if(r(i,l)){var u;try{if(typeof i[l]!="function"){var b=Error((f||"React class")+": "+s+" type `"+l+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof i[l]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw b.name="Invariant Violation",b}u=i[l](o,l,f,s,null,t)}catch(O){u=O}if(u&&!(u instanceof Error)&&e((f||"React class")+": type specification of "+s+" `"+l+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof u+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),u instanceof Error&&!(u.message in n)){n[u.message]=!0;var y=c?c():"";e("Failed "+s+" type: "+u.message+(y!=null?y:""))}}}}return a.resetWarningCache=function(){process.env.NODE_ENV!=="production"&&(n={})},ht=a,ht}var xt,$n;function yi(){if($n)return xt;$n=1;var e=gr(),t=bi(),n=en(),r=yr(),a=gi(),i=function(){};process.env.NODE_ENV!=="production"&&(i=function(s){var f="Warning: "+s;typeof console!="undefined"&&console.error(f);try{throw new Error(f)}catch(c){}});function o(){return null}return xt=function(s,f){var c=typeof Symbol=="function"&&Symbol.iterator,l="@@iterator";function u(d){var g=d&&(c&&d[c]||d[l]);if(typeof g=="function")return g}var b="<<anonymous>>",y={array:T("array"),bigint:T("bigint"),bool:T("boolean"),func:T("function"),number:T("number"),object:T("object"),string:T("string"),symbol:T("symbol"),any:$(),arrayOf:k,element:C(),elementType:m(),instanceOf:B,node:q(),objectOf:se,oneOf:te,oneOfType:Q,shape:V,exact:K};function O(d,g){return d===g?d!==0||1/d===1/g:d!==d&&g!==g}function w(d,g){this.message=d,this.data=g&&typeof g=="object"?g:{},this.stack=""}w.prototype=Error.prototype;function x(d){if(process.env.NODE_ENV!=="production")var g={},_=0;function P(R,A,I,N,z,j,ee){if(N=N||b,j=j||I,ee!==n){if(f){var v=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");throw v.name="Invariant Violation",v}else if(process.env.NODE_ENV!=="production"&&typeof console!="undefined"){var ie=N+":"+I;!g[ie]&&_<3&&(i("You are manually calling a React.PropTypes validation function for the `"+j+"` prop on `"+N+"`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."),g[ie]=!0,_++)}}return A[I]==null?R?A[I]===null?new w("The "+z+" `"+j+"` is marked as required "+("in `"+N+"`, but its value is `null`.")):new w("The "+z+" `"+j+"` is marked as required in "+("`"+N+"`, but its value is `undefined`.")):null:d(A,I,N,z,j)}var S=P.bind(null,!1);return S.isRequired=P.bind(null,!0),S}function T(d){function g(_,P,S,R,A,I){var N=_[P],z=Z(N);if(z!==d){var j=J(N);return new w("Invalid "+R+" `"+A+"` of type "+("`"+j+"` supplied to `"+S+"`, expected ")+("`"+d+"`."),{expectedType:d})}return null}return x(g)}function $(){return x(o)}function k(d){function g(_,P,S,R,A){if(typeof d!="function")return new w("Property `"+A+"` of component `"+S+"` has invalid PropType notation inside arrayOf.");var I=_[P];if(!Array.isArray(I)){var N=Z(I);return new w("Invalid "+R+" `"+A+"` of type "+("`"+N+"` supplied to `"+S+"`, expected an array."))}for(var z=0;z<I.length;z++){var j=d(I,z,S,R,A+"["+z+"]",n);if(j instanceof Error)return j}return null}return x(g)}function C(){function d(g,_,P,S,R){var A=g[_];if(!s(A)){var I=Z(A);return new w("Invalid "+S+" `"+R+"` of type "+("`"+I+"` supplied to `"+P+"`, expected a single ReactElement."))}return null}return x(d)}function m(){function d(g,_,P,S,R){var A=g[_];if(!e.isValidElementType(A)){var I=Z(A);return new w("Invalid "+S+" `"+R+"` of type "+("`"+I+"` supplied to `"+P+"`, expected a single ReactElement type."))}return null}return x(d)}function B(d){function g(_,P,S,R,A){if(!(_[P]instanceof d)){var I=d.name||b,N=Ee(_[P]);return new w("Invalid "+R+" `"+A+"` of type "+("`"+N+"` supplied to `"+S+"`, expected ")+("instance of `"+I+"`."))}return null}return x(g)}function te(d){if(!Array.isArray(d))return process.env.NODE_ENV!=="production"&&(arguments.length>1?i("Invalid arguments supplied to oneOf, expected an array, got "+arguments.length+" arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."):i("Invalid argument supplied to oneOf, expected an array.")),o;function g(_,P,S,R,A){for(var I=_[P],N=0;N<d.length;N++)if(O(I,d[N]))return null;var z=JSON.stringify(d,function(ee,v){var ie=J(v);return ie==="symbol"?String(v):v});return new w("Invalid "+R+" `"+A+"` of value `"+String(I)+"` "+("supplied to `"+S+"`, expected one of "+z+"."))}return x(g)}function se(d){function g(_,P,S,R,A){if(typeof d!="function")return new w("Property `"+A+"` of component `"+S+"` has invalid PropType notation inside objectOf.");var I=_[P],N=Z(I);if(N!=="object")return new w("Invalid "+R+" `"+A+"` of type "+("`"+N+"` supplied to `"+S+"`, expected an object."));for(var z in I)if(r(I,z)){var j=d(I,z,S,R,A+"."+z,n);if(j instanceof Error)return j}return null}return x(g)}function Q(d){if(!Array.isArray(d))return process.env.NODE_ENV!=="production"&&i("Invalid argument supplied to oneOfType, expected an instance of array."),o;for(var g=0;g<d.length;g++){var _=d[g];if(typeof _!="function")return i("Invalid argument supplied to oneOfType. Expected an array of check functions, but received "+ye(_)+" at index "+g+"."),o}function P(S,R,A,I,N){for(var z=[],j=0;j<d.length;j++){var ee=d[j],v=ee(S,R,A,I,N,n);if(v==null)return null;v.data&&r(v.data,"expectedType")&&z.push(v.data.expectedType)}var ie=z.length>0?", expected one of type ["+z.join(", ")+"]":"";return new w("Invalid "+I+" `"+N+"` supplied to "+("`"+A+"`"+ie+"."))}return x(P)}function q(){function d(g,_,P,S,R){return re(g[_])?null:new w("Invalid "+S+" `"+R+"` supplied to "+("`"+P+"`, expected a ReactNode."))}return x(d)}function G(d,g,_,P,S){return new w((d||"React class")+": "+g+" type `"+_+"."+P+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+S+"`.")}function V(d){function g(_,P,S,R,A){var I=_[P],N=Z(I);if(N!=="object")return new w("Invalid "+R+" `"+A+"` of type `"+N+"` "+("supplied to `"+S+"`, expected `object`."));for(var z in d){var j=d[z];if(typeof j!="function")return G(S,R,A,z,J(j));var ee=j(I,z,S,R,A+"."+z,n);if(ee)return ee}return null}return x(g)}function K(d){function g(_,P,S,R,A){var I=_[P],N=Z(I);if(N!=="object")return new w("Invalid "+R+" `"+A+"` of type `"+N+"` "+("supplied to `"+S+"`, expected `object`."));var z=t({},_[P],d);for(var j in z){var ee=d[j];if(r(d,j)&&typeof ee!="function")return G(S,R,A,j,J(ee));if(!ee)return new w("Invalid "+R+" `"+A+"` key `"+j+"` supplied to `"+S+"`.\nBad object: "+JSON.stringify(_[P],null,"  ")+`
Valid keys: `+JSON.stringify(Object.keys(d),null,"  "));var v=ee(I,j,S,R,A+"."+j,n);if(v)return v}return null}return x(g)}function re(d){switch(typeof d){case"number":case"string":case"undefined":return!0;case"boolean":return!d;case"object":if(Array.isArray(d))return d.every(re);if(d===null||s(d))return!0;var g=u(d);if(g){var _=g.call(d),P;if(g!==d.entries){for(;!(P=_.next()).done;)if(!re(P.value))return!1}else for(;!(P=_.next()).done;){var S=P.value;if(S&&!re(S[1]))return!1}}else return!1;return!0;default:return!1}}function me(d,g){return d==="symbol"?!0:g?g["@@toStringTag"]==="Symbol"||typeof Symbol=="function"&&g instanceof Symbol:!1}function Z(d){var g=typeof d;return Array.isArray(d)?"array":d instanceof RegExp?"object":me(g,d)?"symbol":g}function J(d){if(typeof d=="undefined"||d===null)return""+d;var g=Z(d);if(g==="object"){if(d instanceof Date)return"date";if(d instanceof RegExp)return"regexp"}return g}function ye(d){var g=J(d);switch(g){case"array":case"object":return"an "+g;case"boolean":case"date":case"regexp":return"a "+g;default:return g}}function Ee(d){return!d.constructor||!d.constructor.name?b:d.constructor.name}return y.checkPropTypes=a,y.resetWarningCache=a.resetWarningCache,y.PropTypes=y,y},xt}var wt,zn;function hi(){if(zn)return wt;zn=1;var e=en();function t(){}function n(){}return n.resetWarningCache=t,wt=function(){function r(o,s,f,c,l,u){if(u!==e){var b=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw b.name="Invariant Violation",b}}r.isRequired=r;function a(){return r}var i={array:r,bigint:r,bool:r,func:r,number:r,object:r,string:r,symbol:r,any:r,arrayOf:a,element:r,elementType:r,instanceOf:a,node:r,objectOf:a,oneOf:a,oneOfType:a,shape:a,exact:a,checkPropTypes:n,resetWarningCache:t};return i.PropTypes=i,i},wt}if(process.env.NODE_ENV!=="production"){var xi=gr(),wi=!0;_n.exports=yi()(xi.isElement,wi)}else _n.exports=hi()();function Yn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),n.push.apply(n,r)}return n}function ve(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?Yn(Object(n),!0).forEach(function(r){Pe(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Yn(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function ot(e){return ot=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ot(e)}function Pe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ki(e,t){if(e==null)return{};var n={},r=Object.keys(e),a,i;for(i=0;i<r.length;i++)a=r[i],!(t.indexOf(a)>=0)&&(n[a]=e[a]);return n}function Si(e,t){if(e==null)return{};var n=ki(e,t),r,a;if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],!(t.indexOf(r)>=0)&&Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}function Lt(e){return Ei(e)||Oi(e)||Ai(e)||Pi()}function Ei(e){if(Array.isArray(e))return Ft(e)}function Oi(e){if(typeof Symbol!="undefined"&&e[Symbol.iterator]!=null||e["@@iterator"]!=null)return Array.from(e)}function Ai(e,t){if(e){if(typeof e=="string")return Ft(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);if(n==="Object"&&e.constructor&&(n=e.constructor.name),n==="Map"||n==="Set")return Array.from(e);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Ft(e,t)}}function Ft(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Pi(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Ii(e){var t,n=e.beat,r=e.fade,a=e.beatFade,i=e.bounce,o=e.shake,s=e.flash,f=e.spin,c=e.spinPulse,l=e.spinReverse,u=e.pulse,b=e.fixedWidth,y=e.inverse,O=e.border,w=e.listItem,x=e.flip,T=e.size,$=e.rotation,k=e.pull,C=(t={"fa-beat":n,"fa-fade":r,"fa-beat-fade":a,"fa-bounce":i,"fa-shake":o,"fa-flash":s,"fa-spin":f,"fa-spin-reverse":l,"fa-spin-pulse":c,"fa-pulse":u,"fa-fw":b,"fa-inverse":y,"fa-border":O,"fa-li":w,"fa-flip":x===!0,"fa-flip-horizontal":x==="horizontal"||x==="both","fa-flip-vertical":x==="vertical"||x==="both"},Pe(t,"fa-".concat(T),typeof T!="undefined"&&T!==null),Pe(t,"fa-rotate-".concat($),typeof $!="undefined"&&$!==null&&$!==0),Pe(t,"fa-pull-".concat(k),typeof k!="undefined"&&k!==null),Pe(t,"fa-swap-opacity",e.swapOpacity),t);return Object.keys(C).map(function(m){return C[m]?m:null}).filter(function(m){return m})}function Ti(e){return e=e-0,e===e}function hr(e){return Ti(e)?e:(e=e.replace(/[\-_\s]+(.)?/g,function(t,n){return n?n.toUpperCase():""}),e.substr(0,1).toLowerCase()+e.substr(1))}var Ci=["style"];function _i(e){return e.charAt(0).toUpperCase()+e.slice(1)}function Ri(e){return e.split(";").map(function(t){return t.trim()}).filter(function(t){return t}).reduce(function(t,n){var r=n.indexOf(":"),a=hr(n.slice(0,r)),i=n.slice(r+1).trim();return a.startsWith("webkit")?t[_i(a)]=i:t[a]=i,t},{})}function xr(e,t){var n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};if(typeof t=="string")return t;var r=(t.children||[]).map(function(f){return xr(e,f)}),a=Object.keys(t.attributes||{}).reduce(function(f,c){var l=t.attributes[c];switch(c){case"class":f.attrs.className=l,delete t.attributes.class;break;case"style":f.attrs.style=Ri(l);break;default:c.indexOf("aria-")===0||c.indexOf("data-")===0?f.attrs[c.toLowerCase()]=l:f.attrs[hr(c)]=l}return f},{attrs:{}}),i=n.style,o=i===void 0?{}:i,s=Si(n,Ci);return a.attrs.style=ve(ve({},a.attrs.style),o),e.apply(void 0,[t.tag,ve(ve({},a.attrs),s)].concat(Lt(r)))}var wr=!1;try{wr=process.env.NODE_ENV==="production"}catch(e){}function Ni(){if(!wr&&console&&typeof console.error=="function"){var e;(e=console).error.apply(e,arguments)}}function Un(e){if(e&&ot(e)==="object"&&e.prefix&&e.iconName&&e.icon)return e;if(Mt.icon)return Mt.icon(e);if(e===null)return null;if(e&&ot(e)==="object"&&e.prefix&&e.iconName)return e;if(Array.isArray(e)&&e.length===2)return{prefix:e[0],iconName:e[1]};if(typeof e=="string")return{prefix:"fas",iconName:e}}function kt(e,t){return Array.isArray(t)&&t.length>0||!Array.isArray(t)&&t?Pe({},e,t):{}}var Ue=M.forwardRef(function(e,t){var n=e.icon,r=e.mask,a=e.symbol,i=e.className,o=e.title,s=e.titleId,f=e.maskId,c=Un(n),l=kt("classes",[].concat(Lt(Ii(e)),Lt(i.split(" ")))),u=kt("transform",typeof e.transform=="string"?Mt.transform(e.transform):e.transform),b=kt("mask",Un(r)),y=mi(c,ve(ve(ve(ve({},l),u),b),{},{symbol:a,title:o,titleId:s,maskId:f}));if(!y)return Ni("Could not find icon",c),null;var O=y.abstract,w={ref:t};return Object.keys(e).forEach(function(x){Ue.defaultProps.hasOwnProperty(x)||(w[x]=e[x])}),ji(O[0],w)});Ue.displayName="FontAwesomeIcon";Ue.propTypes={beat:E.bool,border:E.bool,beatFade:E.bool,bounce:E.bool,className:E.string,fade:E.bool,flash:E.bool,mask:E.oneOfType([E.object,E.array,E.string]),maskId:E.string,fixedWidth:E.bool,inverse:E.bool,flip:E.oneOf([!0,!1,"horizontal","vertical","both"]),icon:E.oneOfType([E.object,E.array,E.string]),listItem:E.bool,pull:E.oneOf(["right","left"]),pulse:E.bool,rotation:E.oneOf([0,90,180,270]),shake:E.bool,size:E.oneOf(["2xs","xs","sm","lg","xl","2xl","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"]),spin:E.bool,spinPulse:E.bool,spinReverse:E.bool,symbol:E.oneOfType([E.bool,E.string]),title:E.string,titleId:E.string,transform:E.oneOfType([E.string,E.object]),swapOpacity:E.bool};Ue.defaultProps={border:!1,className:"",mask:null,maskId:null,fixedWidth:!1,inverse:!1,flip:!1,icon:null,listItem:!1,pull:null,pulse:!1,rotation:null,size:null,spin:!1,spinPulse:!1,spinReverse:!1,beat:!1,fade:!1,beatFade:!1,bounce:!1,shake:!1,symbol:!1,title:"",titleId:null,transform:null,swapOpacity:!1};var ji=xr.bind(null,M.createElement);function kr({iconObject:e,size:t="lg"}){return D.jsx("div",{className:"ultimate-blocks-icon-render",children:D.jsx(Ue,{icon:e.getAttributes(),size:t})})}function Dt({targetIcon:e,isEmpty:t=!1,onClick:n}){const r=M.useRef(null),[a,i]=M.useState(!1),o=s=>f=>{f.preventDefault(),f.stopPropagation(),i(s)};return D.jsx("div",{ref:r,className:"ultimate-blocks-icon-card",onMouseEnter:o(!0),onMouseLeave:o(!1),"data-is-empty":t,onClick:s=>{s.preventDefault(),s.stopPropagation(),n(e.getName())},"data-icon":e.getName(),children:!t&&D.jsxs(M.Fragment,{children:[D.jsx(kr,{iconObject:e}),a&&D.jsx($t.Popover,{anchor:r.current,children:D.jsx("div",{className:"ultimate-blocks-icon-card-popover-wrap",children:e.getName()})})]})})}function Mi({targetViewpoint:e,threshold:t=1,visibleCallback:n=()=>{}}){const r=M.useRef(null);return M.useEffect(()=>{const a={root:e.current,threshold:t},i=new IntersectionObserver(n,a);return i.observe(r.current),()=>{i.disconnect()}},[]),D.jsx("div",{ref:r,className:"ultimate-blocks-intersection-observer",children:"+"})}function Li({iconList:e,onIconSelect:t,onIconClear:n,maxVisibleCards:r=30}){const a=M.useRef(null),[i,o]=M.useState(0),[s,f]=M.useState(0),[c,l]=M.useState(null),[u,b]=M.useState([]),y=()=>{const x=i*r,T=e.slice(0,x);b(T)};M.useEffect(()=>{const x=Math.ceil(e.length/r);f(x),l(St()),o(1),y()},[e]),M.useEffect(()=>{c!==null&&(o(i+1),y())},[c]);const O=()=>{const x=u.map(T=>D.jsx(Dt,{onClick:t,targetIcon:T},T.getName()));return D.jsxs(M.Fragment,{children:[D.jsx(Dt,{isEmpty:!0,targetIcon:new zt("set_select_empty_icon",{iconName:"clear selection"}),onClick:n},"clear_selection"),x]})},w=()=>D.jsx("div",{className:"no-icon-listing",children:D.jsx("i",{children:qn.__("no icon found","ultimate-blocks")})});return D.jsxs("div",{ref:a,className:"ultimate-blocks-icon-listing",children:[e.length>0?O():w(),D.jsx(Mi,{targetViewpoint:a,threshold:.5,visibleCallback:()=>{l(St())}})]})}function Fi({frequentList:e=[],listSize:t=4,onSelect:n}){const[r,a]=M.useState([]);return M.useEffect(()=>{const i=e.slice(0,t),o=t-i.length;for(let s=0;s<o;s++)i.push(null);a(i)},[e]),D.jsx("div",{className:"ultimate-blocks-frequent-icon-listing",children:r.map((i,o)=>D.jsx(Dt,{targetIcon:i||new zt("empty",{iconName:"empty"}),isEmpty:i===null,onClick:n},o))})}function Di({id:e,onFilterChange:t,iconList:n,onIconSelect:r,onIconClear:a,currentIconObject:i=null,frequentList:o=[]},s){return D.jsx("div",{id:e,className:"ultimate-blocks-icon-control-wrapper",children:D.jsx($t.Dropdown,{className:"ultimate-blocks-icon-control-dropdown",renderToggle:({onToggle:f})=>D.jsx("div",{id:e,role:"button",onClick:()=>{t(""),f()},className:"ultimate-blocks-icon-control-preview-main",ref:s,children:i&&D.jsx(kr,{iconObject:i,size:"2xl"})}),renderContent:()=>D.jsxs("div",{className:"ultimate-blocks-icon-list-wrap",children:[D.jsx(Nr,{onChange:f=>Ar.Debouncer(()=>t(f),200,"icon-search-input")}),D.jsx(Fi,{frequentList:o,onSelect:r}),D.jsx(Li,{iconList:n,onIconSelect:r,onIconClear:a})]})})})}const $i=M.forwardRef(Di),zi=(e,t,n=null)=>{const r=n!==null?n:Math.ceil(Date.now()/1e3);return{name:e,count:t,selectionTime:[r]}};function Yi(e){this.sessionCacheName=e;const{models:t}=wp.api,n=o=>o.map(s=>(s.count===void 0&&(s.count=0),s)),r=()=>{const o=sessionStorage.getItem(this.sessionCacheName);if(o)try{return JSON.parse(o)}catch(s){sessionStorage.setItem(this.sessionCacheName,null)}return null},a=()=>he(this,null,function*(){const s=yield new t.Settings().fetch();if(s&&s[this.sessionCacheName])try{return JSON.parse(s[this.sessionCacheName])}catch(f){}return[]}),i=o=>{sessionStorage.setItem(this.sessionCacheName,o)};this.getList=()=>he(this,null,function*(){return new Promise(o=>he(this,null,function*(){let s=[];const f=r();if(f!==null)s=n(f);else{const c=yield a();c&&(s=n(c),i(JSON.stringify(s)))}o(s)}))}),this.getListAsIconNames=()=>he(this,null,function*(){return(yield this.getList()).map(({name:s})=>s)}),this.addFrequentIcon=o=>he(this,null,function*(){const s=r()||[];if(o&&o!==""){const[f]=s.filter(u=>u.name===o);f?f.count=f.count?Number.parseInt(f.count,10)+1:0:s.push(zi(o,1));const c=JSON.stringify(s);i(c),yield new t.Settings().save({[this.sessionCacheName]:c})}return s})}function Ui({label:e,id:t=null,onIconSelect:n=()=>{},selectedIcon:r=null,frequentSettingName:a="ub_icon_choices"}){const[i,o]=M.useState(t),[s,f]=M.useState([]),[c,l]=M.useState([]),[u,b]=M.useState(""),[y,O]=M.useState(r),[w,x]=M.useState([]),[T,$]=M.useState(null),k=M.useRef(null),C=M.useRef(!0),m=()=>he(this,null,function*(){let q=T;q||(q=new Yi(a),$(q));let G=yield q.getList();G=G.sort((K,re)=>{const{count:me}=K,{count:Z}=re;return me>Z?-1:me<Z?1:0});const V=G.map(K=>K.name&&K.name!==""?Q(K.name):null).filter(K=>K!==null);x(V)}),B=M.useRef(!0);M.useEffect(()=>{m()},[s]),M.useEffect(()=>{n(y),B.current||T.addFrequentIcon(y).then(()=>{m()}),B.current=!1},[y]),M.useEffect(()=>{i===null&&o(St());let q;const G=global||self;if(G.ubIcons)q=G.ubIcons;else{const V=ut(ut({},Pr.fas),Ir.fab),K=Object.keys(V).filter(J=>Object.prototype.hasOwnProperty.call(V,J)),re=K.map(J=>V[J].iconName);q=Array.from(new Set(re)).map(J=>{let ye=null;return K.map(Ee=>{try{if(V[Ee].iconName===J)throw ye=Ee,new Error("match found, stop iteration")}catch(d){}}),ye}).map(J=>new zt(J,V[J])),G.ubIcons=q}f([...q]),l([...q])},[]),M.useEffect(()=>{C.current||te(u),C.current=!1},[u]);const te=q=>{let V=q.trim().toLowerCase();V.length<3&&(V="");const K=s.filter(re=>re.getName().includes(V));l(K)},se=()=>{const{current:q}=k;q&&q.click()},Q=q=>{if(q){const[G]=s.filter(V=>V.getName()===q);if(G)return G}return null};return D.jsxs($t.PanelRow,{className:"ultimate-blocks-icon-control-panel-row",children:[D.jsx("label",{"data-testid":"icon-control-container-label",onClick:se,htmlFor:i,children:e}),D.jsx($i,{id:i,ref:k,onFilterChange:b,iconList:c,onIconSelect:O,onIconClear:()=>O(null),currentIconObject:Q(y),frequentList:w})]})}exports.IconControl=Ui;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
